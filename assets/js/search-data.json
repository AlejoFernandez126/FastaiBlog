{
  
    
        "post0": {
            "title": "Formula 1 data analysis project DH 140 Winter 22 UCLA, Alejo Fernandez",
            "content": "Overview of entire Project . Personal intro: . -Hello my name is Alejo Fernandez. I am a fourth year student at the University of California Los Angeles. I am pursuing a degree in Philosophy and minoring in Digital Humanities. . Project intro: . In this project I want to analyze Formula 1 data, at first my reasearch topic was focusing on the correlations between a pitstop and the final position for a driver in the same grand prix. The type of data that I wanted to analyze in Formula 1 is limited and not much of it is publicly available. Therefore, I had to transition the subject of my project from pit stop correlations to lap times and lap speed analysis in Formula 1 from 2014-2017. I asked different types of question, I wnted to find out who were the fastest drivers based on their lap speed during the 2017 season. I also wanted to find out the differences in lap speed in each circuit to potentially see what type of car and aero packacges would be best for each cirucit based on lap speed data. . Context: . What is Formula 1 . -Formula One (also Formula 1 or F1 and officially the FIA Formula One World Championship) is the highest class of single-seat auto racing that is sanctioned by the Fédération Internationale de l&#39;Automobile (FIA). The FIA Formula One World Championship has been one of the premier forms of racing around the world since its inaugural season in 1950. . -Why is this interesting? . -At first I decided to focus on this question because I think pit stops are the epitome of the team work factor that goes into a grand prix. It’s an instance in which all three aspects are working simultaneously. The driver, the pit crew, and the race strategist/engineers need to work harmoniously in order to have a successful race. . -The driver has to hit his marks, not exceed speed on pitlane entry and have a safe pit exit. . -The crew must be precise, a group of specilized pit crew that are in charge of the vehicales mdoifcations. This occurs in under 5 seconds and even under 2 seconds. . -The strategist/engineers in the team have to be aware of everything occurring in the race from the start. Taking into consideration countless variables that are unpredictable. They have to time the pit strategy based upon what everyone else is doing, at some points it becomes of a game of who is going to make the first move to begin the race strategy. . -The importance of the pitstop for a driver is critical because a driver can have the perfect race and go into their MANDATORY Pit stop yet have a crew member leave a wheel nut loose which causes your wheel to fly off as you are entering the track. This ruins your race. If the race strategist make a premature call to enter the pit to change tire compound, it can ruin the race by having no grip at the end of the grand prix or by having too much grip and ruining the tires before the end of the race. Additionally, the engineers can order to make changes to the vehicles if the driver is complain. The engineer then communicates that with the crew and the crew execute the changes. There are countless changes but a change of camber, caster, toe, or wing angle are some of the more common adjustments effectiveness of data analytics in finding the insights from the data that are of high significance and efficient. . Pit stop rules/procedures . Once drivers enter the pitlane, they must slow down to 80kph (50 mph) in the race. This is to ensure the safety of the pit crews and everyone working in and around the pit lane. Drivers have a special button on their steering wheels that they press, which limits their speed automatically in the pit lane. However, if drivers fail to respect the speed limit, they will receive a time penalty. . Pit stops in Formula 1 are a complicated process and involve over 20 people. Teams practice them for hours during the offseason and in between track sessions on a race weekend. They must be as quick as possible as in Formula 1; mere split seconds can be the difference between coming out ahead or behind a chasing car. . Each of the 23 people involved in a pit stop has a specific role, and all are as crucial as the rest. A front jackman and a rear jackman are responsible for lifting the car off the ground to change the tires. The jacks they use cost over USD 300.000 as they are highly specialized pieces of equipment that need to lift the car with ease. . Some four-wheel gunners are responsible for unfastening the old wheel and fastening the new wheel. Someone removes the old tire to help the wheel gunners, and another person helps put the new wheel on. Therefore, for each wheel attachment on the car, there are three people responsible for the wheels. . Two mechanics are also responsible for holding the car steady while the pit stop is taking place, and another two adjust the front nose cone if necessary. . Once the car has been stopped, the mechanics will quickly change the tires. Ever since mid-race refueling was banned in 2010, the average pit stop time if no front wing change is required is around two to three seconds. However, if the front wing has been damaged and needs to be changed, pit stops will take well over 10 seconds as it takes much longer to remove and replace the front wing than it does with tires. . Red Bull performed the fastest pit stop in Formula 1 history at the 2019 Brazilian Grand Prix, and they changed Max Verstappen’s tires in only 1.82 seconds. . This does not include the time it takes for drivers to enter and exit the pit box. The entire process takes between 20-30 seconds, depending on the length of the pitlane at the specific track. . Additional context for, F1 2014-2017 . Formula 1 fans were stuck with races that were producing less than exciting racing because of how dominant Mercedes was and is. Additionally, Red Bull and Ferrari were not only struggling with their own cars but were also in the midst of changing their driver lineup. Pair a dominant duo of Lewis Hamilton and Nico Rosberg with Mercedes F1 W05 and the begging of a dominant era began while other teams were trying to catch up. From 2014-2021 Mercedes won the World Constructors’ Championship, in that time frame Red Bull went through multiple driver line ups. Along with other teams on the grid, the movement and dropping of drivers to replace another hinders the drivers ability to get familiar with the car. As a result I think this played to Mercedes advantage in having a pair of dominant driver contractually locked in for years when they began their Formula 1 domination. . Motivation to study this topic . Part of the motivation to study Formula 1 data sets is because I think Formula 1 is the epitome of motorsport, the biggest budgets and the newest technology. Not only are Formula 1 cars ridiculously fast around a track but drivers and crew members must perform at the highest level or risk getting fired. Additionally, I wanted to focusing my research project on two aspects: . 1.) A topic that I find interesting . 2.) A topic that is interesting to motorsport enthusiasts. . Since F1 is the highest form of motorsports I figured I could reach a larger audience if I focused on a series like F1 instead of smaller series that only have a niche audience. . Any prior related work . -Hello my name is Alejo Fernandez. I am a fourth year student at the University of California Los Angeles. I am pursuing a degree in Philosophy and minoring in Digital Humanities. . -Fun fact I am also a professional race car driver. I began my racing career at age 16, when I began with kart and at age 18 after high school I turned pro and began to compete in Rallycross. . -My first race was under the FIA Rallycross Championship in the RX lites division in Montalegre Portugal. My second race was at X-Games Austin 2014. . -I competed in Red Bull Global Rallycross championship were I obtained multiple podiums, fast laps, and pole positions. . Methods//Data Introduction . The Data: . -The data I used was found on kaggle.com . -The data sets I gathered contains data from 2014 through the 2017 season, and consists of tables describing constructors, race drivers, lap times, pit stops and more. . -The files I used were CSV type. I created a .txt file that had drivers name with their id since the original data set used numbers as its primary form of reference for a driver. . Acknowledgements: . -The data was downloaded from http://ergast.com/mrd/ at the conclusion of the 2017 season. -The data was originally gathered and published to the public domain by Chris Newell. . Limitations of the Data set . The limitations that I had with the data set data are the following: . -Formula 1 data in regards to performance is difficult to find . -The data that was public and available didn’t have pit stop information that I was looking for. I wanted to focus my project for the 2018-2021 Formula 1 seasons but I wasn’t able to find much data about those particular years or the data that I did find, didn’t have the data I was looking for such in regard to pit stop times. . -Therefore I decided to focus on what was available and see where my analysis would take me. . Analytical process . I analyzed the data in this project both quantitatively and qualitatively. I analyzed and viewed the data sets individually at first and then I merged different dataset with matching relevant features. At first I wanted the project to focus on pitstop correlations but that was difficult because wasn’t able to split the dataset by year, so the pitstop plot I created is cumulative. Because of that I wasn’t able to use the pitstop data how I wanted so I decided to see what type of plot I could create from the pitstop data and then figure out what other type of question I can infer from the data. I created a plot that demonstrated the average time duration (AKA: pitstop) it took drivers using the data from 2014-2017. After, was when my research question changed and i began to explore the data. . Data cleaning . -I went through trial and error trying to understand the data I had. So, I created a statistical analysis that included the relationship between all individual features in the dataset along with a correlation coefficient matrix, number of nan values, skewness of features, and heatmap to further analize the data I had. . -I used numpy,pandas,matplotlib, and seaborn in this project. . Number of Nan Values: . -The number of Nan Values is critical in understanding and manipulating the data. This helped me analyze the missing values in the rest of the datasets that I had. In turn this allowed me to see the usability of the data since there were some errors in the data set. This boils down to the way that the data system operate. . Skewness: . The skewness explains the density of the data. This can be significant to look at if we use a specific year to observe high and low significance. This helps find the features that can see a decline or estimation over the years. If the data skews negatively then those are see as in an increase in their distribution over the coming years. . Heatmap: . The color in the heatmap represents the level of similarity between the features. The colors range from deep to light blue. If the color is a deep blue (1) it mean that the two features are highly correlated to one another. . RESULTS . -In hte folowing section of this notebook will contian the results section. . -This section will do the follwoing: . 1.)Lay out data exploration . 2.)Finding . 3.)Visuals . . Data exploration begins . import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns . import matplotlib . np.__version__ . &#39;1.20.3&#39; . . pd.__version__ . &#39;1.3.3&#39; . matplotlib.__version__ . &#39;3.4.3&#39; . sns.__version__ . &#39;0.11.2&#39; . #has the following columns: raceid,year,round,circuitid,name,date,time, and a Wikipedia url . raceIddf = pd.read_csv(&#39;14-17_Races.csv&#39;) . raceIddf . raceId year round circuitId name date time url . 0 900 | 2014 | 1 | 1 | Australian Grand Prix | 2014-03-16 | 06:00:00 | https://en.wikipedia.org/wiki/2014_Australian_... | . 1 901 | 2014 | 2 | 2 | Malaysian Grand Prix | 2014-03-30 | 08:00:00 | https://en.wikipedia.org/wiki/2014_Malaysian_G... | . 2 902 | 2014 | 3 | 3 | Bahrain Grand Prix | 2014-04-06 | 15:00:00 | http://en.wikipedia.org/wiki/2014_Bahrain_Gran... | . 3 903 | 2014 | 4 | 17 | Chinese Grand Prix | 2014-04-20 | 07:00:00 | http://en.wikipedia.org/wiki/2014_Chinese_Gran... | . 4 904 | 2014 | 5 | 4 | Spanish Grand Prix | 2014-05-11 | 12:00:00 | http://en.wikipedia.org/wiki/2014_Spanish_Gran... | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 74 984 | 2017 | 16 | 22 | Japanese Grand Prix | 2017-10-08 | 05:00:00 | https://en.wikipedia.org/wiki/2017_Japanese_Gr... | . 75 985 | 2017 | 17 | 69 | United States Grand Prix | 2017-10-22 | 19:00:00 | https://en.wikipedia.org/wiki/2017_United_Stat... | . 76 986 | 2017 | 18 | 32 | Mexican Grand Prix | 2017-10-29 | 19:00:00 | https://en.wikipedia.org/wiki/2017_Mexican_Gra... | . 77 987 | 2017 | 19 | 18 | Brazilian Grand Prix | 2017-11-12 | 16:00:00 | https://en.wikipedia.org/wiki/2017_Brazilian_G... | . 78 988 | 2017 | 20 | 24 | Abu Dhabi Grand Prix | 2017-11-26 | 13:00:00 | https://en.wikipedia.org/wiki/2017_Abu_Dhabi_G... | . 79 rows × 8 columns . # Using S to refer to season and the number it follows is the year. i.e. s15= season 2015 . s14 = raceIddf.loc[:18, [&#39;raceId&#39;,&#39;year&#39;,&#39;round&#39;,&#39;name&#39;]] . s14 . raceId year round name . 0 900 | 2014 | 1 | Australian Grand Prix | . 1 901 | 2014 | 2 | Malaysian Grand Prix | . 2 902 | 2014 | 3 | Bahrain Grand Prix | . 3 903 | 2014 | 4 | Chinese Grand Prix | . 4 904 | 2014 | 5 | Spanish Grand Prix | . 5 905 | 2014 | 6 | Monaco Grand Prix | . 6 906 | 2014 | 7 | Canadian Grand Prix | . 7 907 | 2014 | 8 | Austrian Grand Prix | . 8 908 | 2014 | 9 | British Grand Prix | . 9 909 | 2014 | 10 | German Grand Prix | . 10 910 | 2014 | 11 | Hungarian Grand Prix | . 11 911 | 2014 | 12 | Belgian Grand Prix | . 12 912 | 2014 | 13 | Italian Grand Prix | . 13 913 | 2014 | 14 | Singapore Grand Prix | . 14 914 | 2014 | 15 | Japanese Grand Prix | . 15 915 | 2014 | 16 | Russian Grand Prix | . 16 916 | 2014 | 17 | United States Grand Prix | . 17 917 | 2014 | 18 | Brazilian Grand Prix | . 18 918 | 2014 | 19 | Abu Dhabi Grand Prix | . s15 = raceIddf.loc[19:37, [&#39;raceId&#39;,&#39;year&#39;,&#39;round&#39;,&#39;name&#39;]] . s15 . raceId year round name . 19 931 | 2015 | 6 | Monaco Grand Prix | . 20 932 | 2015 | 7 | Canadian Grand Prix | . 21 929 | 2015 | 4 | Bahrain Grand Prix | . 22 930 | 2015 | 5 | Spanish Grand Prix | . 23 928 | 2015 | 3 | Chinese Grand Prix | . 24 926 | 2015 | 1 | Australian Grand Prix | . 25 927 | 2015 | 2 | Malaysian Grand Prix | . 26 933 | 2015 | 8 | Austrian Grand Prix | . 27 934 | 2015 | 9 | British Grand Prix | . 28 936 | 2015 | 10 | Hungarian Grand Prix | . 29 937 | 2015 | 11 | Belgian Grand Prix | . 30 938 | 2015 | 12 | Italian Grand Prix | . 31 939 | 2015 | 13 | Singapore Grand Prix | . 32 940 | 2015 | 14 | Japanese Grand Prix | . 33 941 | 2015 | 15 | Russian Grand Prix | . 34 942 | 2015 | 16 | United States Grand Prix | . 35 943 | 2015 | 17 | Mexican Grand Prix | . 36 944 | 2015 | 18 | Brazilian Grand Prix | . 37 945 | 2015 | 19 | Abu Dhabi Grand Prix | . s16 = raceIddf.loc[38:58, [&#39;raceId&#39;,&#39;year&#39;,&#39;round&#39;,&#39;name&#39;]] . s16 . raceId year round name . 38 948 | 2016 | 1 | Australian Grand Prix | . 39 949 | 2016 | 2 | Bahrain Grand Prix | . 40 950 | 2016 | 3 | Chinese Grand Prix | . 41 951 | 2016 | 4 | Russian Grand Prix | . 42 952 | 2016 | 5 | Spanish Grand Prix | . 43 953 | 2016 | 6 | Monaco Grand Prix | . 44 954 | 2016 | 7 | Canadian Grand Prix | . 45 955 | 2016 | 8 | European Grand Prix | . 46 956 | 2016 | 9 | Austrian Grand Prix | . 47 957 | 2016 | 10 | British Grand Prix | . 48 958 | 2016 | 11 | Hungarian Grand Prix | . 49 959 | 2016 | 12 | German Grand Prix | . 50 960 | 2016 | 13 | Belgian Grand Prix | . 51 961 | 2016 | 14 | Italian Grand Prix | . 52 962 | 2016 | 15 | Singapore Grand Prix | . 53 963 | 2016 | 16 | Malaysian Grand Prix | . 54 964 | 2016 | 17 | Japanese Grand Prix | . 55 965 | 2016 | 18 | United States Grand Prix | . 56 966 | 2016 | 19 | Mexican Grand Prix | . 57 967 | 2016 | 20 | Brazilian Grand Prix | . 58 968 | 2016 | 21 | Abu Dhabi Grand Prix | . s17 = raceIddf.loc[59:78, [&#39;raceId&#39;,&#39;year&#39;,&#39;round&#39;,&#39;name&#39;]] . s17 . raceId year round name . 59 969 | 2017 | 1 | Australian Grand Prix | . 60 970 | 2017 | 2 | Chinese Grand Prix | . 61 971 | 2017 | 3 | Bahrain Grand Prix | . 62 972 | 2017 | 4 | Russian Grand Prix | . 63 973 | 2017 | 5 | Spanish Grand Prix | . 64 974 | 2017 | 6 | Monaco Grand Prix | . 65 975 | 2017 | 7 | Canadian Grand Prix | . 66 976 | 2017 | 8 | Azerbaijan Grand Prix | . 67 977 | 2017 | 9 | Austrian Grand Prix | . 68 978 | 2017 | 10 | British Grand Prix | . 69 979 | 2017 | 11 | Hungarian Grand Prix | . 70 980 | 2017 | 12 | Belgian Grand Prix | . 71 981 | 2017 | 13 | Italian Grand Prix | . 72 982 | 2017 | 14 | Singapore Grand Prix | . 73 983 | 2017 | 15 | Malaysian Grand Prix | . 74 984 | 2017 | 16 | Japanese Grand Prix | . 75 985 | 2017 | 17 | United States Grand Prix | . 76 986 | 2017 | 18 | Mexican Grand Prix | . 77 987 | 2017 | 19 | Brazilian Grand Prix | . 78 988 | 2017 | 20 | Abu Dhabi Grand Prix | . #The pitstop file contains the following columns: #raceid, driverid,stop number, lap performed, time of day the pitstop was performed, the duration, and its equivalence in milliseconds. . pitdf = pd.read_csv(&#39;14-17_Pitstops.csv&#39;) . pitdf . raceId driverId stop lap time duration milliseconds . 0 900 | 154 | 1 | 1 | 17:09:56 | 17.255 | 17255 | . 1 900 | 821 | 1 | 1 | 17:10:12 | 32.657 | 32657 | . 2 900 | 815 | 1 | 1 | 17:10:14 | 25.541 | 25541 | . 3 900 | 18 | 1 | 11 | 17:26:02 | 22.411 | 22411 | . 4 900 | 815 | 2 | 11 | 17:27:03 | 22.497 | 22497 | . ... ... | ... | ... | ... | ... | ... | ... | . 3235 988 | 828 | 1 | 30 | 17:56:57 | 22.176 | 22176 | . 3236 988 | 839 | 1 | 31 | 17:57:47 | 21.865 | 21865 | . 3237 988 | 832 | 1 | 31 | 17:57:49 | 21.956 | 21956 | . 3238 988 | 154 | 1 | 32 | 17:59:52 | 21.850 | 21850 | . 3239 988 | 840 | 3 | 35 | 18:06:11 | 21.908 | 21908 | . 3240 rows × 7 columns . pitdf.loc[:3240, [&#39;raceId&#39;, &#39;driverId&#39;, &#39;stop&#39;,&#39;duration&#39;,&#39;lap&#39;]] . raceId driverId stop duration lap . 0 900 | 154 | 1 | 17.255 | 1 | . 1 900 | 821 | 1 | 32.657 | 1 | . 2 900 | 815 | 1 | 25.541 | 1 | . 3 900 | 18 | 1 | 22.411 | 11 | . 4 900 | 815 | 2 | 22.497 | 11 | . ... ... | ... | ... | ... | ... | . 3235 988 | 828 | 1 | 22.176 | 30 | . 3236 988 | 839 | 1 | 21.865 | 31 | . 3237 988 | 832 | 1 | 21.956 | 31 | . 3238 988 | 154 | 1 | 21.850 | 32 | . 3239 988 | 840 | 3 | 21.908 | 35 | . 3240 rows × 5 columns . # exmaple s refers to sason number refers to year, this pitdf has: &#39;raceId&#39;, &#39;driverId&#39;, &#39;stop&#39;,&#39;duration&#39;, &#39;lap&#39; . s14pitdf = pitdf.loc[:815, [&#39;raceId&#39;, &#39;driverId&#39;, &#39;stop&#39;,&#39;duration&#39;, &#39;lap&#39;]] . s14pitdf . raceId driverId stop duration lap . 0 900 | 154 | 1 | 17.255 | 1 | . 1 900 | 821 | 1 | 32.657 | 1 | . 2 900 | 815 | 1 | 25.541 | 1 | . 3 900 | 18 | 1 | 22.411 | 11 | . 4 900 | 815 | 2 | 22.497 | 11 | . ... ... | ... | ... | ... | ... | . 811 918 | 815 | 2 | 22.325 | 41 | . 812 918 | 13 | 2 | 22.040 | 43 | . 813 918 | 818 | 3 | 22.348 | 44 | . 814 918 | 20 | 2 | 21.611 | 46 | . 815 918 | 817 | 2 | 21.582 | 47 | . 816 rows × 5 columns . s15pitdf = pitdf.loc[816:1556, [&#39;raceId&#39;, &#39;driverId&#39;, &#39;stop&#39;,&#39;duration&#39;,&#39;lap&#39;]] . s15pitdf . raceId driverId stop duration lap . 816 926 | 828 | 1 | 22.681 | 1 | . 817 926 | 8 | 1 | 27.465 | 16 | . 818 926 | 13 | 1 | 22.062 | 21 | . 819 926 | 807 | 1 | 22.137 | 21 | . 820 926 | 817 | 1 | 22.535 | 23 | . ... ... | ... | ... | ... | ... | . 1552 945 | 1 | 2 | 21.392 | 41 | . 1553 945 | 828 | 2 | 22.200 | 41 | . 1554 945 | 154 | 2 | 22.234 | 43 | . 1555 945 | 831 | 3 | 22.086 | 44 | . 1556 945 | 4 | 4 | 22.377 | 47 | . 741 rows × 5 columns . s16pitdf = pitdf.loc[1557:2545, [&#39;raceId&#39;, &#39;driverId&#39;, &#39;stop&#39; ,&#39;duration&#39;, &#39;lap&#39;]] . s16pitdf . raceId driverId stop duration lap . 1557 948 | 825 | 1 | 27.831 | 1 | . 1558 948 | 832 | 1 | 22.414 | 8 | . 1559 948 | 831 | 1 | 22.701 | 10 | . 1560 948 | 13 | 1 | 21.550 | 11 | . 1561 948 | 836 | 1 | 26.206 | 11 | . ... ... | ... | ... | ... | ... | . 2541 968 | 20 | 2 | 21.872 | 37 | . 2542 968 | 4 | 2 | 22.248 | 38 | . 2543 968 | 154 | 2 | 22.527 | 38 | . 2544 968 | 828 | 1 | 22.991 | 38 | . 2545 968 | 835 | 3 | 22.588 | 41 | . 989 rows × 5 columns . s17pitdf = pitdf.loc[2546:3240, [&#39;raceId&#39;, &#39;driverId&#39;, &#39;stop&#39;,&#39;duration&#39;,&#39;lap&#39;]] . s17pitdf . raceId driverId stop duration lap . 2546 969 | 825 | 1 | 31.336 | 1 | . 2547 969 | 840 | 1 | 22.293 | 5 | . 2548 969 | 838 | 1 | 39.562 | 9 | . 2549 969 | 839 | 1 | 22.154 | 15 | . 2550 969 | 841 | 1 | 28.591 | 15 | . ... ... | ... | ... | ... | ... | . 3235 988 | 828 | 1 | 22.176 | 30 | . 3236 988 | 839 | 1 | 21.865 | 31 | . 3237 988 | 832 | 1 | 21.956 | 31 | . 3238 988 | 154 | 1 | 21.850 | 32 | . 3239 988 | 840 | 3 | 21.908 | 35 | . 694 rows × 5 columns . # It demonstrates the average pitstop duration from all drivers in F1 during 2014-2017 # I have this image here to tie it to the data frames that I created above. # In the section that demosntrates the code for the plots, ill give a further breakdown of the image below. . from IPython.display import Image Image(url=&quot;f1pitstop.png&quot;, width=500, height=500) . . resultsdf = pd.read_csv(&#39;14-17_Results.csv&#39;) . resultsdf . resultId raceId driverId constructorId number grid position positionText positionOrder points laps time milliseconds fastestLap rank fastestLapTime fastestLapSpeed statusId . 0 22130 | 900 | 3 | 131 | 6 | 3 | 1.0 | 1 | 1 | 25 | 57 | 32:58.7 | 5578710.0 | 19.0 | 1 | 01:32.5 | 206.436 | 1 | . 1 22131 | 900 | 825 | 1 | 20 | 4 | 2.0 | 2 | 2 | 18 | 57 | 26.777 | 5605487.0 | 49.0 | 6 | 01:33.1 | 205.131 | 1 | . 2 22132 | 900 | 18 | 1 | 22 | 10 | 3.0 | 3 | 3 | 15 | 57 | 30.027 | 5608737.0 | 39.0 | 5 | 01:32.9 | 205.46 | 1 | . 3 22133 | 900 | 4 | 6 | 14 | 5 | 4.0 | 4 | 4 | 12 | 57 | 35.284 | 5613994.0 | 57.0 | 7 | 01:33.2 | 204.867 | 1 | . 4 22134 | 900 | 822 | 3 | 77 | 15 | 5.0 | 5 | 5 | 10 | 57 | 47.639 | 5626349.0 | 56.0 | 3 | 01:32.6 | 206.128 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1645 23777 | 988 | 842 | 5 | 10 | 17 | 16.0 | 16 | 16 | 0 | 54 | NaN | NaN | 33.0 | 16 | 01:43.8 | 192.542 | 11 | . 1646 23778 | 988 | 828 | 15 | 9 | 19 | 17.0 | 17 | 17 | 0 | 54 | NaN | NaN | 36.0 | 15 | 01:43.6 | 193.057 | 11 | . 1647 23779 | 988 | 840 | 3 | 18 | 15 | 18.0 | 18 | 18 | 0 | 54 | NaN | NaN | 52.0 | 6 | 01:42.3 | 195.402 | 11 | . 1648 23780 | 988 | 832 | 4 | 55 | 12 | NaN | R | 19 | 0 | 31 | NaN | NaN | 26.0 | 14 | 01:43.4 | 193.41 | 36 | . 1649 23781 | 988 | 817 | 9 | 3 | 4 | NaN | R | 20 | 0 | 20 | NaN | NaN | 13.0 | 12 | 01:42.8 | 194.579 | 9 | . 1650 rows × 18 columns . resultsdf.columns . Index([&#39;resultId&#39;, &#39;raceId&#39;, &#39;driverId&#39;, &#39;constructorId&#39;, &#39;number&#39;, &#39;grid&#39;, &#39;position&#39;, &#39;positionText&#39;, &#39;positionOrder&#39;, &#39;points&#39;, &#39;laps&#39;, &#39;time&#39;, &#39;milliseconds&#39;, &#39;fastestLap&#39;, &#39;rank&#39;, &#39;fastestLapTime&#39;, &#39;fastestLapSpeed&#39;, &#39;statusId&#39;], dtype=&#39;object&#39;) . . Missing Values Analysis . percent_missing = resultsdf.isnull().sum() * 100 / len(resultsdf) missing_value_df = pd.DataFrame({&#39;column_name&#39;: resultsdf.columns, &#39;percent_missing&#39;: percent_missing}) . #At first i thought i would be able to manipulate the data that i had but even then there are some limitations. . missing_value_df . column_name percent_missing . resultId resultId | 0.000000 | . raceId raceId | 0.000000 | . driverId driverId | 0.000000 | . constructorId constructorId | 0.000000 | . number number | 0.000000 | . grid grid | 0.000000 | . position position | 19.575758 | . positionText positionText | 0.000000 | . positionOrder positionOrder | 0.000000 | . points points | 0.000000 | . laps laps | 0.000000 | . time time | 55.696970 | . milliseconds milliseconds | 55.696970 | . fastestLap fastestLap | 5.212121 | . rank rank | 0.000000 | . fastestLapTime fastestLapTime | 5.212121 | . fastestLapSpeed fastestLapSpeed | 5.212121 | . statusId statusId | 0.000000 | . -The two features&#39; time and milliseconds have more than 50% nan values this means that it will be very difficult to understand the two columns with that many nan values. . -Two features that had more than 50%, one at about 19%, and the remaining are of less than 6%. . -I removed the features that had a nan value greater than 15% from the dataset. . sns.barplot(x=&#39;column_name&#39;,y=&#39;percent_missing&#39;,data=missing_value_df) plt.xticks(rotation=70) plt.title(&#39;Number of Nan Values Analysis&#39;) . Text(0.5, 1.0, &#39;Number of Nan Values Analysis&#39;) . -The above is a plot of columns i the data set that have missiing values. . missing_value_df_cleaned=missing_value_df[missing_value_df[&#39;percent_missing&#39;]&lt;50] . missing_value_df_cleaned . column_name percent_missing . resultId resultId | 0.000000 | . raceId raceId | 0.000000 | . driverId driverId | 0.000000 | . constructorId constructorId | 0.000000 | . number number | 0.000000 | . grid grid | 0.000000 | . position position | 19.575758 | . positionText positionText | 0.000000 | . positionOrder positionOrder | 0.000000 | . points points | 0.000000 | . laps laps | 0.000000 | . fastestLap fastestLap | 5.212121 | . rank rank | 0.000000 | . fastestLapTime fastestLapTime | 5.212121 | . fastestLapSpeed fastestLapSpeed | 5.212121 | . statusId statusId | 0.000000 | . -Now the data frame will not account for the other features that have any percent missing greater than 50% . -Therefore time and milliseconds will not be accounted for in the new data frames I create. . # this is where the bulk of the heavy lifting for this project was done. . missing_value_df_cleaned_columns=missing_value_df_cleaned[&#39;column_name&#39;].values . missing_value_df_cleaned_columns . array([&#39;resultId&#39;, &#39;raceId&#39;, &#39;driverId&#39;, &#39;constructorId&#39;, &#39;number&#39;, &#39;grid&#39;, &#39;position&#39;, &#39;positionText&#39;, &#39;positionOrder&#39;, &#39;points&#39;, &#39;laps&#39;, &#39;fastestLap&#39;, &#39;rank&#39;, &#39;fastestLapTime&#39;, &#39;fastestLapSpeed&#39;, &#39;statusId&#39;], dtype=object) . . resultsdf=resultsdf[missing_value_df_cleaned_columns] . resultsdf . resultId raceId driverId constructorId number grid position positionText positionOrder points laps fastestLap rank fastestLapTime fastestLapSpeed statusId . 0 22130 | 900 | 3 | 131 | 6 | 3 | 1.0 | 1 | 1 | 25 | 57 | 19.0 | 1 | 01:32.5 | 206.436 | 1 | . 1 22131 | 900 | 825 | 1 | 20 | 4 | 2.0 | 2 | 2 | 18 | 57 | 49.0 | 6 | 01:33.1 | 205.131 | 1 | . 2 22132 | 900 | 18 | 1 | 22 | 10 | 3.0 | 3 | 3 | 15 | 57 | 39.0 | 5 | 01:32.9 | 205.46 | 1 | . 3 22133 | 900 | 4 | 6 | 14 | 5 | 4.0 | 4 | 4 | 12 | 57 | 57.0 | 7 | 01:33.2 | 204.867 | 1 | . 4 22134 | 900 | 822 | 3 | 77 | 15 | 5.0 | 5 | 5 | 10 | 57 | 56.0 | 3 | 01:32.6 | 206.128 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1645 23777 | 988 | 842 | 5 | 10 | 17 | 16.0 | 16 | 16 | 0 | 54 | 33.0 | 16 | 01:43.8 | 192.542 | 11 | . 1646 23778 | 988 | 828 | 15 | 9 | 19 | 17.0 | 17 | 17 | 0 | 54 | 36.0 | 15 | 01:43.6 | 193.057 | 11 | . 1647 23779 | 988 | 840 | 3 | 18 | 15 | 18.0 | 18 | 18 | 0 | 54 | 52.0 | 6 | 01:42.3 | 195.402 | 11 | . 1648 23780 | 988 | 832 | 4 | 55 | 12 | NaN | R | 19 | 0 | 31 | 26.0 | 14 | 01:43.4 | 193.41 | 36 | . 1649 23781 | 988 | 817 | 9 | 3 | 4 | NaN | R | 20 | 0 | 20 | 13.0 | 12 | 01:42.8 | 194.579 | 9 | . 1650 rows × 16 columns . cleaned_data=resultsdf.dropna(axis=0) . cleaned_data . resultId raceId driverId constructorId number grid position positionText positionOrder points laps fastestLap rank fastestLapTime fastestLapSpeed statusId . 0 22130 | 900 | 3 | 131 | 6 | 3 | 1.0 | 1 | 1 | 25 | 57 | 19.0 | 1 | 01:32.5 | 206.436 | 1 | . 1 22131 | 900 | 825 | 1 | 20 | 4 | 2.0 | 2 | 2 | 18 | 57 | 49.0 | 6 | 01:33.1 | 205.131 | 1 | . 2 22132 | 900 | 18 | 1 | 22 | 10 | 3.0 | 3 | 3 | 15 | 57 | 39.0 | 5 | 01:32.9 | 205.46 | 1 | . 3 22133 | 900 | 4 | 6 | 14 | 5 | 4.0 | 4 | 4 | 12 | 57 | 57.0 | 7 | 01:33.2 | 204.867 | 1 | . 4 22134 | 900 | 822 | 3 | 77 | 15 | 5.0 | 5 | 5 | 10 | 57 | 56.0 | 3 | 01:32.6 | 206.128 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1643 23775 | 988 | 836 | 15 | 94 | 18 | 14.0 | 14 | 14 | 0 | 54 | 50.0 | 17 | 01:43.9 | 192.5 | 11 | . 1644 23776 | 988 | 843 | 5 | 28 | 20 | 15.0 | 15 | 15 | 0 | 54 | 52.0 | 18 | 01:43.9 | 192.444 | 11 | . 1645 23777 | 988 | 842 | 5 | 10 | 17 | 16.0 | 16 | 16 | 0 | 54 | 33.0 | 16 | 01:43.8 | 192.542 | 11 | . 1646 23778 | 988 | 828 | 15 | 9 | 19 | 17.0 | 17 | 17 | 0 | 54 | 36.0 | 15 | 01:43.6 | 193.057 | 11 | . 1647 23779 | 988 | 840 | 3 | 18 | 15 | 18.0 | 18 | 18 | 0 | 54 | 52.0 | 6 | 01:42.3 | 195.402 | 11 | . 1326 rows × 16 columns . -This is a result of a cleaned data using the results data frame created from the results CSV file . Stastical Data Analysis . . -Below I will include basic statistical analysis using the data that is now cleaned. . -This will help understand some of the relationships the dat values have. . cleaned_data.describe() . resultId raceId driverId constructorId number grid position positionOrder points laps fastestLap rank statusId . count 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | 1326.000000 | . mean 22955.622172 | 945.810709 | 517.309955 | 54.823529 | 25.476621 | 10.512821 | 9.054299 | 9.054299 | 6.085973 | 59.411765 | 46.794872 | 9.414027 | 6.098793 | . std 472.760968 | 26.216018 | 388.865768 | 79.549309 | 24.139325 | 6.137253 | 5.098286 | 5.098286 | 7.622420 | 8.920156 | 12.365936 | 5.441538 | 9.585683 | . min 22130.000000 | 900.000000 | 1.000000 | 1.000000 | 1.000000 | 0.000000 | 1.000000 | 1.000000 | 0.000000 | 39.000000 | 5.000000 | 1.000000 | 1.000000 | . 25% 22542.250000 | 926.000000 | 18.000000 | 5.000000 | 8.000000 | 5.000000 | 5.000000 | 5.000000 | 0.000000 | 53.000000 | 39.000000 | 5.000000 | 1.000000 | . 50% 22961.500000 | 950.000000 | 815.000000 | 9.000000 | 19.000000 | 10.000000 | 9.000000 | 9.000000 | 2.000000 | 56.000000 | 47.000000 | 9.000000 | 1.000000 | . 75% 23349.750000 | 967.000000 | 828.000000 | 131.000000 | 31.000000 | 16.000000 | 13.000000 | 13.000000 | 10.000000 | 69.000000 | 54.000000 | 14.000000 | 11.000000 | . max 23779.000000 | 988.000000 | 843.000000 | 210.000000 | 99.000000 | 22.000000 | 22.000000 | 22.000000 | 50.000000 | 78.000000 | 76.000000 | 22.000000 | 132.000000 | . -Even after I have cleaned the data, based on this statistical analysis, a normal person wouldn’t be able to deduct anything from this. . -That was part of the issue I was encountering with the pit stop data at first. . -This is another instance in which the systems and methods the people who gathered this data can be confusing. . -An clear example would be to look at the driverid, a driverid min is 1 which is correlated to Lewis Hamilton arbitrarily. The max driver 1d value is 843, so I’m assuming that’s driver ids account for the number of drivers that have ever participated in Formula 1. However, this is exactly my point, Hamilton was not the first driver in Formula 1 the majority of his competitors have a driver id higher than 800. . . cleaned_data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 1326 entries, 0 to 1647 Data columns (total 16 columns): # Column Non-Null Count Dtype -- -- 0 resultId 1326 non-null int64 1 raceId 1326 non-null int64 2 driverId 1326 non-null int64 3 constructorId 1326 non-null int64 4 number 1326 non-null int64 5 grid 1326 non-null int64 6 position 1326 non-null float64 7 positionText 1326 non-null object 8 positionOrder 1326 non-null int64 9 points 1326 non-null int64 10 laps 1326 non-null int64 11 fastestLap 1326 non-null float64 12 rank 1326 non-null int64 13 fastestLapTime 1326 non-null object 14 fastestLapSpeed 1326 non-null object 15 statusId 1326 non-null int64 dtypes: float64(2), int64(11), object(3) memory usage: 176.1+ KB . Skewness Analysis . cleaned_data.skew(axis = 0,numeric_only=True).plot(kind=&#39;bar&#39;) plt.xlabel(&#39;features&#39;) plt.ylabel(&#39;skewness score&#39;) plt.title(&#39;Skewness Analysis over the features&#39;) . Text(0.5, 1.0, &#39;Skewness Analysis over the features&#39;) . -This skewness analysis helps paint a picture of the data distribution. . -The data set distribution has both negative and positive distribution of features. . -The feature status ID has a high positive distribution and the driver id has a negative distributions. . -The remaining features have very low positive index distributions between 0 to 1 and this will indicate the remaining features demonstrate a normalized distribution over dataset samples . . cleaned_data.nunique( ) . resultId 1326 raceId 79 driverId 37 constructorId 14 number 39 grid 23 position 22 positionText 22 positionOrder 22 points 17 laps 36 fastestLap 65 rank 22 fastestLapTime 434 fastestLapSpeed 1312 statusId 20 dtype: int64 . cleaned_data.memory_usage( ) . Index 10608 resultId 10608 raceId 10608 driverId 10608 constructorId 10608 number 10608 grid 10608 position 10608 positionText 10608 positionOrder 10608 points 10608 laps 10608 fastestLap 10608 rank 10608 fastestLapTime 10608 fastestLapSpeed 10608 statusId 10608 dtype: int64 . cleaned_data.duplicated( ) . 0 False 1 False 2 False 3 False 4 False ... 1643 False 1644 False 1645 False 1646 False 1647 False Length: 1326, dtype: bool . Correlation Analysis between All features . cleaned_data.corr( ) . resultId raceId driverId constructorId number grid position positionOrder points laps fastestLap rank statusId . resultId 1.000000 | 0.995870 | 0.112681 | -0.086007 | 0.065874 | 0.001777 | -0.005044 | -0.005044 | -0.012481 | -0.003480 | 0.123450 | -0.014727 | 0.048569 | . raceId 0.995870 | 1.000000 | 0.110131 | -0.086578 | 0.069071 | -0.006287 | -0.015265 | -0.015265 | -0.004723 | 0.003948 | 0.123527 | -0.020840 | 0.046313 | . driverId 0.112681 | 0.110131 | 1.000000 | -0.050858 | 0.248227 | 0.359671 | 0.380406 | 0.380406 | -0.401763 | -0.010989 | 0.017665 | 0.366705 | 0.142256 | . constructorId -0.086007 | -0.086578 | -0.050858 | 1.000000 | 0.108339 | 0.203502 | 0.194222 | 0.194222 | -0.003186 | -0.003412 | -0.043914 | 0.205257 | 0.061063 | . number 0.065874 | 0.069071 | 0.248227 | 0.108339 | 1.000000 | 0.063556 | 0.110873 | 0.110873 | -0.045354 | 0.009953 | 0.017755 | 0.137690 | 0.051963 | . grid 0.001777 | -0.006287 | 0.359671 | 0.203502 | 0.063556 | 1.000000 | 0.759700 | 0.759700 | -0.705088 | -0.058521 | -0.060647 | 0.624307 | 0.319012 | . position -0.005044 | -0.015265 | 0.380406 | 0.194222 | 0.110873 | 0.759700 | 1.000000 | 1.000000 | -0.870017 | -0.084133 | -0.078713 | 0.709331 | 0.451619 | . positionOrder -0.005044 | -0.015265 | 0.380406 | 0.194222 | 0.110873 | 0.759700 | 1.000000 | 1.000000 | -0.870017 | -0.084133 | -0.078713 | 0.709331 | 0.451619 | . points -0.012481 | -0.004723 | -0.401763 | -0.003186 | -0.045354 | -0.705088 | -0.870017 | -0.870017 | 1.000000 | 0.051038 | 0.059574 | -0.655596 | -0.378848 | . laps -0.003480 | 0.003948 | -0.010989 | -0.003412 | 0.009953 | -0.058521 | -0.084133 | -0.084133 | 0.051038 | 1.000000 | 0.620777 | -0.057204 | 0.008650 | . fastestLap 0.123450 | 0.123527 | 0.017665 | -0.043914 | 0.017755 | -0.060647 | -0.078713 | -0.078713 | 0.059574 | 0.620777 | 1.000000 | -0.175679 | 0.000031 | . rank -0.014727 | -0.020840 | 0.366705 | 0.205257 | 0.137690 | 0.624307 | 0.709331 | 0.709331 | -0.655596 | -0.057204 | -0.175679 | 1.000000 | 0.325767 | . statusId 0.048569 | 0.046313 | 0.142256 | 0.061063 | 0.051963 | 0.319012 | 0.451619 | 0.451619 | -0.378848 | 0.008650 | 0.000031 | 0.325767 | 1.000000 | . -The Correlation analysis was very important as it provided insight into the internal relationship between the features in the dataset. . -This will help hone in on the features that are more relevant to the output feature. Meaning, this can also help eliminate the redundant features by producing the same coefficient score in each feature. . -The correlation analysis was carried out on all features and their relationship was projected in terms of coefficients. . import matplotlib.pyplot as mp dataplot = sns.heatmap(cleaned_data.corr(), cmap=&quot;YlGnBu&quot;, annot=True) mp.show() . The analysis between features . -The analysis was performed to understand the effect of variation of one feature with another features and distribution between them along with density and sample measurement. . -I chose a few features and their density, joint density distributions were observed along with time and speed features. The feature&#39;s position and points were analyzed along with time and daytime distributions. . -For example look at resultid race id on the left upper corner correlate with the result id and race id on the x-axis. It demonstrates 1, showing the normalization of the distribution over the data samples. . -This type of analysis will help me to understand the internal relations between features. . Heatmap: The color in the heatmap represents the level of similarity between the features. The colors range from deep to light blue. If the color is a deep blue (1) it mean that the two features are highly correlated to one another. . cleaned_data.dtypes . resultId int64 raceId int64 driverId int64 constructorId int64 number int64 grid int64 position float64 positionText object positionOrder int64 points int64 laps int64 fastestLap float64 rank int64 fastestLapTime object fastestLapSpeed object statusId int64 dtype: object . cleaned_data . resultId raceId driverId constructorId number grid position positionText positionOrder points laps fastestLap rank fastestLapTime fastestLapSpeed statusId . 0 22130 | 900 | 3 | 131 | 6 | 3 | 1.0 | 1 | 1 | 25 | 57 | 19.0 | 1 | 01:32.5 | 206.436 | 1 | . 1 22131 | 900 | 825 | 1 | 20 | 4 | 2.0 | 2 | 2 | 18 | 57 | 49.0 | 6 | 01:33.1 | 205.131 | 1 | . 2 22132 | 900 | 18 | 1 | 22 | 10 | 3.0 | 3 | 3 | 15 | 57 | 39.0 | 5 | 01:32.9 | 205.46 | 1 | . 3 22133 | 900 | 4 | 6 | 14 | 5 | 4.0 | 4 | 4 | 12 | 57 | 57.0 | 7 | 01:33.2 | 204.867 | 1 | . 4 22134 | 900 | 822 | 3 | 77 | 15 | 5.0 | 5 | 5 | 10 | 57 | 56.0 | 3 | 01:32.6 | 206.128 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1643 23775 | 988 | 836 | 15 | 94 | 18 | 14.0 | 14 | 14 | 0 | 54 | 50.0 | 17 | 01:43.9 | 192.5 | 11 | . 1644 23776 | 988 | 843 | 5 | 28 | 20 | 15.0 | 15 | 15 | 0 | 54 | 52.0 | 18 | 01:43.9 | 192.444 | 11 | . 1645 23777 | 988 | 842 | 5 | 10 | 17 | 16.0 | 16 | 16 | 0 | 54 | 33.0 | 16 | 01:43.8 | 192.542 | 11 | . 1646 23778 | 988 | 828 | 15 | 9 | 19 | 17.0 | 17 | 17 | 0 | 54 | 36.0 | 15 | 01:43.6 | 193.057 | 11 | . 1647 23779 | 988 | 840 | 3 | 18 | 15 | 18.0 | 18 | 18 | 0 | 54 | 52.0 | 6 | 01:42.3 | 195.402 | 11 | . 1326 rows × 16 columns . . data_driver=pd.read_csv(&#39;Driver name &amp; Ids 14-17 SEASON.txt&#39;) . data_driver . Driver Name driverId . 0 Hamilton | 1 | . 1 Rosberg | 3 | . 2 Ricciardo | 817 | . 3 Bottas | 822 | . 4 Vettel | 20 | . 5 Alonso | 4 | . 6 Massa | 13 | . 7 Button | 18 | . 8 Hulkenberg | 807 | . 9 Perez | 815 | . 10 Magnussen | 825 | . 11 Raikkonen | 8 | . 12 Vergne | 818 | . 13 Grosjean | 154 | . 14 Kvyat | 826 | . 15 Maldonado | 813 | . 16 Bianchi | 824 | . 17 Sutil | 16 | . 18 Ericsson | 828 | . 19 Gutierrez | 821 | . 20 Chilton | 820 | . 21 Kobayashi | 155 | . 22 Stevens | 829 | . 23 Rossi | 834 | . 24 Lotterer | 827 | . 25 Verstappen | 830 | . 26 Nasr | 831 | . 27 Merhi | 833 | . 28 Sainz Jr | 832 | . 29 Palmer | 835 | . 30 Wehrlein | 836 | . 31 Vandoorne | 838 | . 32 Ocon | 839 | . 33 Haryanto | 837 | . 34 Stroll | 840 | . 35 Giovinazzi | 841 | . 36 Hartley | 843 | . -Now each drivers name is correlated to their driverid . data_driver[&#39;driverId&#39;]=data_driver[&#39;driverId&#39;].astype(&#39;int&#39;) . . data_driver . Driver Name driverId . 0 Hamilton | 1 | . 1 Rosberg | 3 | . 2 Ricciardo | 817 | . 3 Bottas | 822 | . 4 Vettel | 20 | . 5 Alonso | 4 | . 6 Massa | 13 | . 7 Button | 18 | . 8 Hulkenberg | 807 | . 9 Perez | 815 | . 10 Magnussen | 825 | . 11 Raikkonen | 8 | . 12 Vergne | 818 | . 13 Grosjean | 154 | . 14 Kvyat | 826 | . 15 Maldonado | 813 | . 16 Bianchi | 824 | . 17 Sutil | 16 | . 18 Ericsson | 828 | . 19 Gutierrez | 821 | . 20 Chilton | 820 | . 21 Kobayashi | 155 | . 22 Stevens | 829 | . 23 Rossi | 834 | . 24 Lotterer | 827 | . 25 Verstappen | 830 | . 26 Nasr | 831 | . 27 Merhi | 833 | . 28 Sainz Jr | 832 | . 29 Palmer | 835 | . 30 Wehrlein | 836 | . 31 Vandoorne | 838 | . 32 Ocon | 839 | . 33 Haryanto | 837 | . 34 Stroll | 840 | . 35 Giovinazzi | 841 | . 36 Hartley | 843 | . . cleaned_data . resultId raceId driverId constructorId number grid position positionText positionOrder points laps fastestLap rank fastestLapTime fastestLapSpeed statusId . 0 22130 | 900 | 3 | 131 | 6 | 3 | 1.0 | 1 | 1 | 25 | 57 | 19.0 | 1 | 01:32.5 | 206.436 | 1 | . 1 22131 | 900 | 825 | 1 | 20 | 4 | 2.0 | 2 | 2 | 18 | 57 | 49.0 | 6 | 01:33.1 | 205.131 | 1 | . 2 22132 | 900 | 18 | 1 | 22 | 10 | 3.0 | 3 | 3 | 15 | 57 | 39.0 | 5 | 01:32.9 | 205.46 | 1 | . 3 22133 | 900 | 4 | 6 | 14 | 5 | 4.0 | 4 | 4 | 12 | 57 | 57.0 | 7 | 01:33.2 | 204.867 | 1 | . 4 22134 | 900 | 822 | 3 | 77 | 15 | 5.0 | 5 | 5 | 10 | 57 | 56.0 | 3 | 01:32.6 | 206.128 | 1 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1643 23775 | 988 | 836 | 15 | 94 | 18 | 14.0 | 14 | 14 | 0 | 54 | 50.0 | 17 | 01:43.9 | 192.5 | 11 | . 1644 23776 | 988 | 843 | 5 | 28 | 20 | 15.0 | 15 | 15 | 0 | 54 | 52.0 | 18 | 01:43.9 | 192.444 | 11 | . 1645 23777 | 988 | 842 | 5 | 10 | 17 | 16.0 | 16 | 16 | 0 | 54 | 33.0 | 16 | 01:43.8 | 192.542 | 11 | . 1646 23778 | 988 | 828 | 15 | 9 | 19 | 17.0 | 17 | 17 | 0 | 54 | 36.0 | 15 | 01:43.6 | 193.057 | 11 | . 1647 23779 | 988 | 840 | 3 | 18 | 15 | 18.0 | 18 | 18 | 0 | 54 | 52.0 | 6 | 01:42.3 | 195.402 | 11 | . 1326 rows × 16 columns . -The matrix above demosntrates the results of the cleaned data on how driverid 3 did for that row which was raceid number 900. . -Nico Rosberg Mercedes Formula 1 driver had a lap speed of over 205Mph at the australian grand prix in 2014(raceid900) He won the 2014 Australian Gp . result = cleaned_data.merge(data_driver, on=[&#39;driverId&#39;]) . result . resultId raceId driverId constructorId number grid position positionText positionOrder points laps fastestLap rank fastestLapTime fastestLapSpeed statusId Driver Name . 0 22130 | 900 | 3 | 131 | 6 | 3 | 1.0 | 1 | 1 | 25 | 57 | 19.0 | 1 | 01:32.5 | 206.436 | 1 | Rosberg | . 1 22153 | 901 | 3 | 131 | 6 | 3 | 2.0 | 2 | 2 | 18 | 56 | 55.0 | 2 | 01:44.0 | 191.946 | 1 | Rosberg | . 2 22175 | 902 | 3 | 131 | 6 | 1 | 2.0 | 2 | 2 | 18 | 57 | 49.0 | 1 | 01:37.0 | 200.816 | 1 | Rosberg | . 3 22197 | 903 | 3 | 131 | 6 | 4 | 2.0 | 2 | 2 | 18 | 54 | 39.0 | 1 | 01:40.4 | 195.45 | 1 | Rosberg | . 4 22219 | 904 | 3 | 131 | 6 | 2 | 2.0 | 2 | 2 | 18 | 66 | 51.0 | 2 | 01:29.2 | 187.794 | 1 | Rosberg | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1316 23727 | 986 | 840 | 3 | 18 | 11 | 6.0 | 6 | 6 | 8 | 70 | 53.0 | 12 | 01:21.1 | 191.142 | 11 | Stroll | . 1317 23757 | 987 | 840 | 3 | 18 | 16 | 16.0 | 16 | 16 | 0 | 69 | 69.0 | 3 | 01:11.9 | 215.863 | 12 | Stroll | . 1318 23779 | 988 | 840 | 3 | 18 | 15 | 18.0 | 18 | 18 | 0 | 54 | 52.0 | 6 | 01:42.3 | 195.402 | 11 | Stroll | . 1319 23714 | 985 | 843 | 5 | 39 | 19 | 13.0 | 13 | 13 | 0 | 55 | 47.0 | 8 | 01:40.0 | 198.509 | 11 | Hartley | . 1320 23776 | 988 | 843 | 5 | 28 | 20 | 15.0 | 15 | 15 | 0 | 54 | 52.0 | 18 | 01:43.9 | 192.444 | 11 | Hartley | . 1321 rows × 17 columns . . status_id=pd.read_csv(&#39;status.csv&#39;) . status_id . statusId status . 0 1 | Finished | . 1 2 | Disqualified | . 2 3 | Accident | . 3 4 | Collision | . 4 5 | Engine | . ... ... | ... | . 129 132 | ERS | . 130 133 | +49 Laps | . 131 134 | +38 Laps | . 132 135 | Brake duct | . 133 136 | Seat | . 134 rows × 2 columns . -Status demonstrates the different reasons as to why a driver may not have finished or the status of how a driver finished a Grand prix. . result_status=result.merge(status_id,on=[&#39;statusId&#39;]) . result_status . resultId raceId driverId constructorId number grid position positionText positionOrder points laps fastestLap rank fastestLapTime fastestLapSpeed statusId Driver Name status . 0 22130 | 900 | 3 | 131 | 6 | 3 | 1.0 | 1 | 1 | 25 | 57 | 19.0 | 1 | 01:32.5 | 206.436 | 1 | Rosberg | Finished | . 1 22153 | 901 | 3 | 131 | 6 | 3 | 2.0 | 2 | 2 | 18 | 56 | 55.0 | 2 | 01:44.0 | 191.946 | 1 | Rosberg | Finished | . 2 22175 | 902 | 3 | 131 | 6 | 1 | 2.0 | 2 | 2 | 18 | 57 | 49.0 | 1 | 01:37.0 | 200.816 | 1 | Rosberg | Finished | . 3 22197 | 903 | 3 | 131 | 6 | 4 | 2.0 | 2 | 2 | 18 | 54 | 39.0 | 1 | 01:40.4 | 195.45 | 1 | Rosberg | Finished | . 4 22219 | 904 | 3 | 131 | 6 | 2 | 2.0 | 2 | 2 | 18 | 66 | 51.0 | 2 | 01:29.2 | 187.794 | 1 | Rosberg | Finished | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 1316 22893 | 944 | 829 | 209 | 28 | 18 | 17.0 | 17 | 17 | 0 | 67 | 42.0 | 19 | 01:19.1 | 196.116 | 14 | Stevens | +4 Laps | . 1317 22633 | 930 | 833 | 209 | 98 | 20 | 18.0 | 18 | 18 | 0 | 62 | 51.0 | 20 | 01:34.2 | 177.877 | 14 | Merhi | +4 Laps | . 1318 22894 | 944 | 834 | 209 | 53 | 17 | 18.0 | 18 | 18 | 0 | 67 | 43.0 | 18 | 01:18.6 | 197.316 | 14 | Rossi | +4 Laps | . 1319 23041 | 953 | 837 | 209 | 88 | 19 | 15.0 | 15 | 15 | 0 | 74 | 70.0 | 13 | 01:19.9 | 150.413 | 14 | Haryanto | +4 Laps | . 1320 22592 | 928 | 830 | 5 | 33 | 13 | 17.0 | 17 | 17 | 0 | 52 | 46.0 | 14 | 01:43.9 | 188.906 | 7 | Verstappen | Transmission | . 1321 rows × 18 columns . -As a result of analysing and cleaning the data further, i began to hone in on questions about fastest times and fastest lap speed. . -I was interested in exploring the data for the 2017 season. . s17pitdf . raceId driverId stop duration lap . 2546 969 | 825 | 1 | 31.336 | 1 | . 2547 969 | 840 | 1 | 22.293 | 5 | . 2548 969 | 838 | 1 | 39.562 | 9 | . 2549 969 | 839 | 1 | 22.154 | 15 | . 2550 969 | 841 | 1 | 28.591 | 15 | . ... ... | ... | ... | ... | ... | . 3235 988 | 828 | 1 | 22.176 | 30 | . 3236 988 | 839 | 1 | 21.865 | 31 | . 3237 988 | 832 | 1 | 21.956 | 31 | . 3238 988 | 154 | 1 | 21.850 | 32 | . 3239 988 | 840 | 3 | 21.908 | 35 | . 694 rows × 5 columns . s17pitdf_reset=s17pitdf.reset_index() . s17pitdf_reset . index raceId driverId stop duration lap . 0 2546 | 969 | 825 | 1 | 31.336 | 1 | . 1 2547 | 969 | 840 | 1 | 22.293 | 5 | . 2 2548 | 969 | 838 | 1 | 39.562 | 9 | . 3 2549 | 969 | 839 | 1 | 22.154 | 15 | . 4 2550 | 969 | 841 | 1 | 28.591 | 15 | . ... ... | ... | ... | ... | ... | ... | . 689 3235 | 988 | 828 | 1 | 22.176 | 30 | . 690 3236 | 988 | 839 | 1 | 21.865 | 31 | . 691 3237 | 988 | 832 | 1 | 21.956 | 31 | . 692 3238 | 988 | 154 | 1 | 21.850 | 32 | . 693 3239 | 988 | 840 | 3 | 21.908 | 35 | . 694 rows × 6 columns . . result_status_final=result_status.merge(s17,on=[&#39;raceId&#39;]) . result_status_final . resultId raceId driverId constructorId number grid position positionText positionOrder points ... fastestLap rank fastestLapTime fastestLapSpeed statusId Driver Name status year round name . 0 23488 | 974 | 825 | 210 | 20 | 11 | 10.0 | 10 | 10 | 1 | ... | 44.0 | 7 | 01:16.3 | 157.42 | 1 | Magnussen | Finished | 2017 | 6 | Monaco Grand Prix | . 1 23482 | 974 | 822 | 131 | 77 | 3 | 4.0 | 4 | 4 | 12 | ... | 22.0 | 9 | 01:16.4 | 157.16 | 1 | Bottas | Finished | 2017 | 6 | Monaco Grand Prix | . 2 23480 | 974 | 8 | 6 | 7 | 1 | 2.0 | 2 | 2 | 18 | ... | 39.0 | 3 | 01:15.5 | 159.058 | 1 | Raikkonen | Finished | 2017 | 6 | Monaco Grand Prix | . 3 23491 | 974 | 815 | 10 | 11 | 7 | 13.0 | 13 | 13 | 0 | ... | 76.0 | 1 | 01:14.8 | 160.561 | 1 | Perez | Finished | 2017 | 6 | Monaco Grand Prix | . 4 23485 | 974 | 1 | 131 | 44 | 13 | 7.0 | 7 | 7 | 6 | ... | 54.0 | 5 | 01:15.8 | 158.433 | 1 | Hamilton | Finished | 2017 | 6 | Monaco Grand Prix | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 304 23470 | 973 | 4 | 1 | 14 | 7 | 12.0 | 12 | 12 | 0 | ... | 64.0 | 4 | 01:23.9 | 199.752 | 12 | Alonso | +2 Laps | 2017 | 5 | Spanish Grand Prix | . 305 23471 | 973 | 13 | 3 | 19 | 9 | 13.0 | 13 | 13 | 0 | ... | 64.0 | 13 | 01:26.5 | 193.796 | 12 | Massa | +2 Laps | 2017 | 5 | Spanish Grand Prix | . 306 23469 | 973 | 828 | 15 | 9 | 16 | 11.0 | 11 | 11 | 0 | ... | 60.0 | 10 | 01:26.2 | 194.379 | 12 | Ericsson | +2 Laps | 2017 | 5 | Spanish Grand Prix | . 307 23473 | 973 | 835 | 4 | 30 | 17 | 15.0 | 15 | 15 | 0 | ... | 44.0 | 6 | 01:24.8 | 197.517 | 12 | Palmer | +2 Laps | 2017 | 5 | Spanish Grand Prix | . 308 23474 | 973 | 840 | 3 | 18 | 18 | 16.0 | 16 | 16 | 0 | ... | 50.0 | 16 | 01:26.8 | 192.98 | 12 | Stroll | +2 Laps | 2017 | 5 | Spanish Grand Prix | . 309 rows × 21 columns . -The data frame above contains cleaned data obtianed from the results csv file merged with driver ids . -The data frame above is only cocerned with the 2017 Formula 1 Season. . result_status_final=result_status_final.replace(&#39;01:42.6&#39;,np.nan) . . result_status_final=result_status_final.dropna(axis=0) . # this will include the fastest laptime in seconds . result_status_final . Unnamed: 0 Unnamed: 0.1 resultId raceId driverId constructorId number grid position positionText ... rank fastestLapTime fastestLapSpeed statusId Driver Name status year round name FastestLapTime_Seconds . 0 0 | 0 | 23488 | 974 | 825 | 210 | 20 | 11 | 10.0 | 10 | ... | 7 | 01:16.3 | 157.420 | 1 | Magnussen | Finished | 2017 | 6 | Monaco Grand Prix | 76.3 | . 1 1 | 1 | 23482 | 974 | 822 | 131 | 77 | 3 | 4.0 | 4 | ... | 9 | 01:16.4 | 157.160 | 1 | Bottas | Finished | 2017 | 6 | Monaco Grand Prix | 76.4 | . 2 2 | 2 | 23480 | 974 | 8 | 6 | 7 | 1 | 2.0 | 2 | ... | 3 | 01:15.5 | 159.058 | 1 | Raikkonen | Finished | 2017 | 6 | Monaco Grand Prix | 75.5 | . 3 3 | 3 | 23491 | 974 | 815 | 10 | 11 | 7 | 13.0 | 13 | ... | 1 | 01:14.8 | 160.561 | 1 | Perez | Finished | 2017 | 6 | Monaco Grand Prix | 74.8 | . 4 4 | 4 | 23485 | 974 | 1 | 131 | 44 | 13 | 7.0 | 7 | ... | 5 | 01:15.8 | 158.433 | 1 | Hamilton | Finished | 2017 | 6 | Monaco Grand Prix | 75.8 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 303 304 | 304 | 23470 | 973 | 4 | 1 | 14 | 7 | 12.0 | 12 | ... | 4 | 01:23.9 | 199.752 | 12 | Alonso | +2 Laps | 2017 | 5 | Spanish Grand Prix | 83.9 | . 304 305 | 305 | 23471 | 973 | 13 | 3 | 19 | 9 | 13.0 | 13 | ... | 13 | 01:26.5 | 193.796 | 12 | Massa | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.5 | . 305 306 | 306 | 23469 | 973 | 828 | 15 | 9 | 16 | 11.0 | 11 | ... | 10 | 01:26.2 | 194.379 | 12 | Ericsson | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.2 | . 306 307 | 307 | 23473 | 973 | 835 | 4 | 30 | 17 | 15.0 | 15 | ... | 6 | 01:24.8 | 197.517 | 12 | Palmer | +2 Laps | 2017 | 5 | Spanish Grand Prix | 84.8 | . 307 308 | 308 | 23474 | 973 | 840 | 3 | 18 | 18 | 16.0 | 16 | ... | 16 | 01:26.8 | 192.980 | 12 | Stroll | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.8 | . 308 rows × 24 columns . result_status_final.columns . Index([&#39;Unnamed: 0&#39;, &#39;Unnamed: 0.1&#39;, &#39;resultId&#39;, &#39;raceId&#39;, &#39;driverId&#39;, &#39;constructorId&#39;, &#39;number&#39;, &#39;grid&#39;, &#39;position&#39;, &#39;positionText&#39;, &#39;positionOrder&#39;, &#39;points&#39;, &#39;laps&#39;, &#39;fastestLap&#39;, &#39;rank&#39;, &#39;fastestLapTime&#39;, &#39;fastestLapSpeed&#39;, &#39;statusId&#39;, &#39;Driver Name&#39;, &#39;status&#39;, &#39;year&#39;, &#39;round&#39;, &#39;name&#39;, &#39;FastestLapTime_Seconds&#39;], dtype=&#39;object&#39;) . -The Above demonstrates all of the columns in the data set. . result_status_final.to_csv(&#39;final_data_all.csv&#39;) . result_status_final=pd.read_csv(&#39;final_data_all.csv&#39;) . result_status_final . Unnamed: 0 Unnamed: 0.1 Unnamed: 0.1.1 resultId raceId driverId constructorId number grid position ... rank fastestLapTime fastestLapSpeed statusId Driver Name status year round name FastestLapTime_Seconds . 0 0 | 0 | 0 | 23488 | 974 | 825 | 210 | 20 | 11 | 10.0 | ... | 7 | 01:16.3 | 157.420 | 1 | Magnussen | Finished | 2017 | 6 | Monaco Grand Prix | 76.3 | . 1 1 | 1 | 1 | 23482 | 974 | 822 | 131 | 77 | 3 | 4.0 | ... | 9 | 01:16.4 | 157.160 | 1 | Bottas | Finished | 2017 | 6 | Monaco Grand Prix | 76.4 | . 2 2 | 2 | 2 | 23480 | 974 | 8 | 6 | 7 | 1 | 2.0 | ... | 3 | 01:15.5 | 159.058 | 1 | Raikkonen | Finished | 2017 | 6 | Monaco Grand Prix | 75.5 | . 3 3 | 3 | 3 | 23491 | 974 | 815 | 10 | 11 | 7 | 13.0 | ... | 1 | 01:14.8 | 160.561 | 1 | Perez | Finished | 2017 | 6 | Monaco Grand Prix | 74.8 | . 4 4 | 4 | 4 | 23485 | 974 | 1 | 131 | 44 | 13 | 7.0 | ... | 5 | 01:15.8 | 158.433 | 1 | Hamilton | Finished | 2017 | 6 | Monaco Grand Prix | 75.8 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 303 303 | 304 | 304 | 23470 | 973 | 4 | 1 | 14 | 7 | 12.0 | ... | 4 | 01:23.9 | 199.752 | 12 | Alonso | +2 Laps | 2017 | 5 | Spanish Grand Prix | 83.9 | . 304 304 | 305 | 305 | 23471 | 973 | 13 | 3 | 19 | 9 | 13.0 | ... | 13 | 01:26.5 | 193.796 | 12 | Massa | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.5 | . 305 305 | 306 | 306 | 23469 | 973 | 828 | 15 | 9 | 16 | 11.0 | ... | 10 | 01:26.2 | 194.379 | 12 | Ericsson | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.2 | . 306 306 | 307 | 307 | 23473 | 973 | 835 | 4 | 30 | 17 | 15.0 | ... | 6 | 01:24.8 | 197.517 | 12 | Palmer | +2 Laps | 2017 | 5 | Spanish Grand Prix | 84.8 | . 307 307 | 308 | 308 | 23474 | 973 | 840 | 3 | 18 | 18 | 16.0 | ... | 16 | 01:26.8 | 192.980 | 12 | Stroll | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.8 | . 308 rows × 25 columns . -The data frame above is the new one i will be using since it has the values that i want to foucs on for the rest of the project. . result_status_final[&#39;fastestLapSpeed&#39;] = result_status_final[&#39;fastestLapSpeed&#39;].astype(float) . -I need to change the the type of object fastestlap speed was to a float in order to manipulate the data. . result_status_final . Unnamed: 0 Unnamed: 0.1 Unnamed: 0.1.1 resultId raceId driverId constructorId number grid position ... rank fastestLapTime fastestLapSpeed statusId Driver Name status year round name FastestLapTime_Seconds . 0 0 | 0 | 0 | 23488 | 974 | 825 | 210 | 20 | 11 | 10.0 | ... | 7 | 01:16.3 | 157.420 | 1 | Magnussen | Finished | 2017 | 6 | Monaco Grand Prix | 76.3 | . 1 1 | 1 | 1 | 23482 | 974 | 822 | 131 | 77 | 3 | 4.0 | ... | 9 | 01:16.4 | 157.160 | 1 | Bottas | Finished | 2017 | 6 | Monaco Grand Prix | 76.4 | . 2 2 | 2 | 2 | 23480 | 974 | 8 | 6 | 7 | 1 | 2.0 | ... | 3 | 01:15.5 | 159.058 | 1 | Raikkonen | Finished | 2017 | 6 | Monaco Grand Prix | 75.5 | . 3 3 | 3 | 3 | 23491 | 974 | 815 | 10 | 11 | 7 | 13.0 | ... | 1 | 01:14.8 | 160.561 | 1 | Perez | Finished | 2017 | 6 | Monaco Grand Prix | 74.8 | . 4 4 | 4 | 4 | 23485 | 974 | 1 | 131 | 44 | 13 | 7.0 | ... | 5 | 01:15.8 | 158.433 | 1 | Hamilton | Finished | 2017 | 6 | Monaco Grand Prix | 75.8 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 303 303 | 304 | 304 | 23470 | 973 | 4 | 1 | 14 | 7 | 12.0 | ... | 4 | 01:23.9 | 199.752 | 12 | Alonso | +2 Laps | 2017 | 5 | Spanish Grand Prix | 83.9 | . 304 304 | 305 | 305 | 23471 | 973 | 13 | 3 | 19 | 9 | 13.0 | ... | 13 | 01:26.5 | 193.796 | 12 | Massa | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.5 | . 305 305 | 306 | 306 | 23469 | 973 | 828 | 15 | 9 | 16 | 11.0 | ... | 10 | 01:26.2 | 194.379 | 12 | Ericsson | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.2 | . 306 306 | 307 | 307 | 23473 | 973 | 835 | 4 | 30 | 17 | 15.0 | ... | 6 | 01:24.8 | 197.517 | 12 | Palmer | +2 Laps | 2017 | 5 | Spanish Grand Prix | 84.8 | . 307 307 | 308 | 308 | 23474 | 973 | 840 | 3 | 18 | 18 | 16.0 | ... | 16 | 01:26.8 | 192.980 | 12 | Stroll | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.8 | . 308 rows × 25 columns . . result_status_final . Unnamed: 0 Unnamed: 0.1 Unnamed: 0.1.1 resultId raceId driverId constructorId number grid position ... rank fastestLapTime fastestLapSpeed statusId Driver Name status year round name FastestLapTime_Seconds . 0 0 | 0 | 0 | 23488 | 974 | 825 | 210 | 20 | 11 | 10.0 | ... | 7 | 01:16.3 | 157.420 | 1 | Magnussen | Finished | 2017 | 6 | Monaco Grand Prix | 76.3 | . 1 1 | 1 | 1 | 23482 | 974 | 822 | 131 | 77 | 3 | 4.0 | ... | 9 | 01:16.4 | 157.160 | 1 | Bottas | Finished | 2017 | 6 | Monaco Grand Prix | 76.4 | . 2 2 | 2 | 2 | 23480 | 974 | 8 | 6 | 7 | 1 | 2.0 | ... | 3 | 01:15.5 | 159.058 | 1 | Raikkonen | Finished | 2017 | 6 | Monaco Grand Prix | 75.5 | . 3 3 | 3 | 3 | 23491 | 974 | 815 | 10 | 11 | 7 | 13.0 | ... | 1 | 01:14.8 | 160.561 | 1 | Perez | Finished | 2017 | 6 | Monaco Grand Prix | 74.8 | . 4 4 | 4 | 4 | 23485 | 974 | 1 | 131 | 44 | 13 | 7.0 | ... | 5 | 01:15.8 | 158.433 | 1 | Hamilton | Finished | 2017 | 6 | Monaco Grand Prix | 75.8 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 303 303 | 304 | 304 | 23470 | 973 | 4 | 1 | 14 | 7 | 12.0 | ... | 4 | 01:23.9 | 199.752 | 12 | Alonso | +2 Laps | 2017 | 5 | Spanish Grand Prix | 83.9 | . 304 304 | 305 | 305 | 23471 | 973 | 13 | 3 | 19 | 9 | 13.0 | ... | 13 | 01:26.5 | 193.796 | 12 | Massa | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.5 | . 305 305 | 306 | 306 | 23469 | 973 | 828 | 15 | 9 | 16 | 11.0 | ... | 10 | 01:26.2 | 194.379 | 12 | Ericsson | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.2 | . 306 306 | 307 | 307 | 23473 | 973 | 835 | 4 | 30 | 17 | 15.0 | ... | 6 | 01:24.8 | 197.517 | 12 | Palmer | +2 Laps | 2017 | 5 | Spanish Grand Prix | 84.8 | . 307 307 | 308 | 308 | 23474 | 973 | 840 | 3 | 18 | 18 | 16.0 | ... | 16 | 01:26.8 | 192.980 | 12 | Stroll | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.8 | . 308 rows × 25 columns . fastestLapTime_data=result_status_final[&#39;fastestLapTime&#39;].values . -Next I want to create an output with only the fastest lap times from the results matrix above. . fastestLapTime_data . array([&#39;01:16.3&#39;, &#39;01:16.4&#39;, &#39;01:15.5&#39;, &#39;01:14.8&#39;, &#39;01:15.8&#39;, &#39;01:15.2&#39;, &#39;01:16.5&#39;, &#39;01:17.1&#39;, &#39;01:15.8&#39;, &#39;01:16.6&#39;, &#39;01:16.3&#39;, &#39;01:16.6&#39;, &#39;01:16.5&#39;, &#39;01:16.1&#39;, &#39;01:16.5&#39;, &#39;01:46.3&#39;, &#39;01:45.2&#39;, &#39;01:43.9&#39;, &#39;01:43.5&#39;, &#39;01:43.4&#39;, &#39;01:47.2&#39;, &#39;01:44.9&#39;, &#39;01:45.9&#39;, &#39;01:47.1&#39;, &#39;01:46.6&#39;, &#39;01:45.6&#39;, &#39;01:45.1&#39;, &#39;01:46.8&#39;, &#39;01:45.5&#39;, &#39;01:49.1&#39;, &#39;01:47.7&#39;, &#39;01:48.9&#39;, &#39;01:47.7&#39;, &#39;01:49.7&#39;, &#39;01:46.6&#39;, &#39;01:46.6&#39;, &#39;01:49.6&#39;, &#39;01:49.1&#39;, &#39;01:50.8&#39;, &#39;01:47.5&#39;, &#39;01:49.7&#39;, &#39;01:49.3&#39;, &#39;01:49.9&#39;, &#39;01:49.7&#39;, &#39;01:50.5&#39;, &#39;01:48.3&#39;, &#39;01:35.3&#39;, &#39;01:33.1&#39;, &#39;01:33.2&#39;, &#39;01:34.7&#39;, &#39;01:33.8&#39;, &#39;01:35.3&#39;, &#39;01:33.7&#39;, &#39;01:33.7&#39;, &#39;01:34.8&#39;, &#39;01:35.1&#39;, &#39;01:35.9&#39;, &#39;01:34.1&#39;, &#39;01:33.7&#39;, &#39;01:36.4&#39;, &#39;01:20.2&#39;, &#39;01:21.2&#39;, &#39;01:20.5&#39;, &#39;01:20.8&#39;, &#39;01:20.8&#39;, &#39;01:20.5&#39;, &#39;01:22.1&#39;, &#39;01:21.6&#39;, &#39;01:22.1&#39;, &#39;01:21.9&#39;, &#39;01:21.6&#39;, &#39;01:22.0&#39;, &#39;01:22.4&#39;, &#39;01:22.8&#39;, &#39;01:21.8&#39;, &#39;01:23.6&#39;, &#39;01:21.6&#39;, &#39;01:13.5&#39;, &#39;01:12.5&#39;, &#39;01:12.5&#39;, &#39;01:13.1&#39;, &#39;01:11.8&#39;, &#39;01:12.5&#39;, &#39;01:13.5&#39;, &#39;01:12.0&#39;, &#39;01:11.0&#39;, &#39;01:13.8&#39;, &#39;01:13.7&#39;, &#39;01:13.6&#39;, &#39;01:14.8&#39;, &#39;01:13.5&#39;, &#39;01:11.9&#39;, &#39;01:26.6&#39;, &#39;01:26.5&#39;, &#39;01:27.0&#39;, &#39;01:26.6&#39;, &#39;01:28.0&#39;, &#39;01:27.0&#39;, &#39;01:28.5&#39;, &#39;01:26.7&#39;, &#39;01:28.3&#39;, &#39;01:27.7&#39;, &#39;01:28.5&#39;, &#39;01:29.4&#39;, &#39;01:29.1&#39;, &#39;01:35.8&#39;, &#39;01:36.0&#39;, &#39;01:35.4&#39;, &#39;01:35.4&#39;, &#39;01:36.8&#39;, &#39;01:37.4&#39;, &#39;01:36.7&#39;, &#39;01:37.5&#39;, &#39;01:38.0&#39;, &#39;01:36.5&#39;, &#39;01:36.5&#39;, &#39;01:37.6&#39;, &#39;01:39.7&#39;, &#39;01:38.2&#39;, &#39;01:37.0&#39;, &#39;01:34.1&#39;, &#39;01:35.4&#39;, &#39;01:33.7&#39;, &#39;01:34.6&#39;, &#39;01:32.8&#39;, &#39;01:33.8&#39;, &#39;01:34.3&#39;, &#39;01:34.9&#39;, &#39;01:33.5&#39;, &#39;01:35.2&#39;, &#39;01:35.0&#39;, &#39;01:35.6&#39;, &#39;01:36.8&#39;, &#39;01:35.6&#39;, &#39;01:37.4&#39;, &#39;01:38.4&#39;, &#39;01:36.8&#39;, &#39;01:38.7&#39;, &#39;01:38.4&#39;, &#39;01:37.3&#39;, &#39;01:38.4&#39;, &#39;01:38.7&#39;, &#39;01:39.6&#39;, &#39;01:38.3&#39;, &#39;01:38.2&#39;, &#39;01:39.8&#39;, &#39;01:38.9&#39;, &#39;01:39.8&#39;, &#39;01:38.9&#39;, &#39;01:40.9&#39;, &#39;01:15.9&#39;, &#39;01:16.1&#39;, &#39;01:15.4&#39;, &#39;01:16.4&#39;, &#39;01:14.6&#39;, &#39;01:14.7&#39;, &#39;01:16.2&#39;, &#39;01:16.2&#39;, &#39;01:16.3&#39;, &#39;01:16.9&#39;, &#39;01:17.0&#39;, &#39;01:16.7&#39;, &#39;01:16.8&#39;, &#39;01:16.0&#39;, &#39;01:17.1&#39;, &#39;01:15.9&#39;, &#39;01:07.8&#39;, &#39;01:07.5&#39;, &#39;01:07.4&#39;, &#39;01:07.5&#39;, &#39;01:08.6&#39;, &#39;01:07.4&#39;, &#39;01:09.0&#39;, &#39;01:08.5&#39;, &#39;01:08.4&#39;, &#39;01:08.7&#39;, &#39;01:09.2&#39;, &#39;01:08.4&#39;, &#39;01:08.7&#39;, &#39;01:08.8&#39;, &#39;01:08.1&#39;, &#39;01:09.3&#39;, &#39;01:30.9&#39;, &#39;01:32.6&#39;, &#39;01:31.5&#39;, &#39;01:30.6&#39;, &#39;01:31.9&#39;, &#39;01:31.9&#39;, &#39;01:30.7&#39;, &#39;01:32.7&#39;, &#39;01:33.6&#39;, &#39;01:33.5&#39;, &#39;01:33.6&#39;, &#39;01:32.3&#39;, &#39;01:33.1&#39;, &#39;01:33.3&#39;, &#39;01:33.5&#39;, &#39;01:33.5&#39;, &#39;01:33.4&#39;, &#39;01:23.5&#39;, &#39;01:25.1&#39;, &#39;01:25.0&#39;, &#39;01:23.5&#39;, &#39;01:23.9&#39;, &#39;01:25.5&#39;, &#39;01:23.4&#39;, &#39;01:25.1&#39;, &#39;01:25.6&#39;, &#39;01:26.0&#39;, &#39;01:26.1&#39;, &#39;01:25.9&#39;, &#39;01:25.0&#39;, &#39;01:26.2&#39;, &#39;01:24.4&#39;, &#39;01:26.5&#39;, &#39;01:25.9&#39;, &#39;01:27.7&#39;, &#39;01:45.4&#39;, &#39;01:46.7&#39;, &#39;01:45.0&#39;, &#39;01:47.1&#39;, &#39;01:47.6&#39;, &#39;01:45.3&#39;, &#39;01:46.5&#39;, &#39;01:46.7&#39;, &#39;01:46.7&#39;, &#39;01:47.7&#39;, &#39;01:47.5&#39;, &#39;01:49.1&#39;, &#39;01:35.3&#39;, &#39;01:35.6&#39;, &#39;01:34.5&#39;, &#39;01:34.1&#39;, &#39;01:34.8&#39;, &#39;01:34.5&#39;, &#39;01:37.2&#39;, &#39;01:36.5&#39;, &#39;01:34.3&#39;, &#39;01:36.9&#39;, &#39;01:35.8&#39;, &#39;01:37.2&#39;, &#39;01:36.4&#39;, &#39;01:35.9&#39;, &#39;01:37.1&#39;, &#39;01:36.6&#39;, &#39;01:36.6&#39;, &#39;01:37.8&#39;, &#39;01:37.8&#39;, &#39;01:38.8&#39;, &#39;01:38.8&#39;, &#39;01:40.5&#39;, &#39;01:38.1&#39;, &#39;01:40.5&#39;, &#39;01:37.9&#39;, &#39;01:41.0&#39;, &#39;01:40.9&#39;, &#39;01:40.1&#39;, &#39;01:41.3&#39;, &#39;01:41.0&#39;, &#39;01:40.3&#39;, &#39;01:39.7&#39;, &#39;01:40.0&#39;, &#39;01:19.4&#39;, &#39;01:20.1&#39;, &#39;01:18.8&#39;, &#39;01:18.9&#39;, &#39;01:21.2&#39;, &#39;01:21.0&#39;, &#39;01:19.9&#39;, &#39;01:19.9&#39;, &#39;01:21.1&#39;, &#39;01:21.0&#39;, &#39;01:20.9&#39;, &#39;01:21.1&#39;, &#39;01:20.3&#39;, &#39;01:21.6&#39;, &#39;01:40.7&#39;, &#39;01:42.4&#39;, &#39;01:42.3&#39;, &#39;01:42.7&#39;, &#39;01:41.5&#39;, &#39;01:40.8&#39;, &#39;01:42.0&#39;, &#39;01:43.9&#39;, &#39;01:43.4&#39;, &#39;01:43.0&#39;, &#39;01:42.4&#39;, &#39;01:43.6&#39;, &#39;01:43.9&#39;, &#39;01:44.0&#39;, &#39;01:42.3&#39;, &#39;01:43.9&#39;, &#39;01:23.6&#39;, &#39;01:23.7&#39;, &#39;01:23.7&#39;, &#39;01:26.7&#39;, &#39;01:26.0&#39;, &#39;01:25.8&#39;, &#39;01:26.9&#39;, &#39;01:26.2&#39;, &#39;01:26.5&#39;, &#39;01:26.3&#39;, &#39;01:26.4&#39;, &#39;01:23.9&#39;, &#39;01:26.5&#39;, &#39;01:26.2&#39;, &#39;01:24.8&#39;, &#39;01:26.8&#39;], dtype=object) . data_seconds=[] for i in range(len(fastestLapTime_data)): x=fastestLapTime_data[i].split(&#39;:&#39;) x[0]=60*float(x[0]) x[1]=float(x[1]) data_seconds.append(x[1]+x[0]) . -The above code is so that I can be able to switch the fastest lap times from a minute formate to a seconds format. . data_seconds . [76.3, 76.4, 75.5, 74.8, 75.8, 75.2, 76.5, 77.1, 75.8, 76.6, 76.3, 76.6, 76.5, 76.1, 76.5, 106.3, 105.2, 103.9, 103.5, 103.4, 107.2, 104.9, 105.9, 107.1, 106.6, 105.6, 105.1, 106.8, 105.5, 109.1, 107.7, 108.9, 107.7, 109.7, 106.6, 106.6, 109.6, 109.1, 110.8, 107.5, 109.7, 109.3, 109.9, 109.7, 110.5, 108.3, 95.3, 93.1, 93.2, 94.7, 93.8, 95.3, 93.7, 93.7, 94.8, 95.1, 95.9, 94.1, 93.7, 96.4, 80.2, 81.2, 80.5, 80.8, 80.8, 80.5, 82.1, 81.6, 82.1, 81.9, 81.6, 82.0, 82.4, 82.8, 81.8, 83.6, 81.6, 73.5, 72.5, 72.5, 73.1, 71.8, 72.5, 73.5, 72.0, 71.0, 73.8, 73.7, 73.6, 74.8, 73.5, 71.9, 86.6, 86.5, 87.0, 86.6, 88.0, 87.0, 88.5, 86.7, 88.3, 87.7, 88.5, 89.4, 89.1, 95.8, 96.0, 95.4, 95.4, 96.8, 97.4, 96.7, 97.5, 98.0, 96.5, 96.5, 97.6, 99.7, 98.2, 97.0, 94.1, 95.4, 93.7, 94.6, 92.8, 93.8, 94.3, 94.9, 93.5, 95.2, 95.0, 95.6, 96.8, 95.6, 97.4, 98.4, 96.8, 98.7, 98.4, 97.3, 98.4, 98.7, 99.6, 98.3, 98.2, 99.8, 98.9, 99.8, 98.9, 100.9, 75.9, 76.1, 75.4, 76.4, 74.6, 74.7, 76.2, 76.2, 76.3, 76.9, 77.0, 76.7, 76.8, 76.0, 77.1, 75.9, 67.8, 67.5, 67.4, 67.5, 68.6, 67.4, 69.0, 68.5, 68.4, 68.7, 69.2, 68.4, 68.7, 68.8, 68.1, 69.3, 90.9, 92.6, 91.5, 90.6, 91.9, 91.9, 90.7, 92.7, 93.6, 93.5, 93.6, 92.3, 93.1, 93.3, 93.5, 93.5, 93.4, 83.5, 85.1, 85.0, 83.5, 83.9, 85.5, 83.4, 85.1, 85.6, 86.0, 86.1, 85.9, 85.0, 86.2, 84.4, 86.5, 85.9, 87.7, 105.4, 106.7, 105.0, 107.1, 107.6, 105.3, 106.5, 106.7, 106.7, 107.7, 107.5, 109.1, 95.3, 95.6, 94.5, 94.1, 94.8, 94.5, 97.2, 96.5, 94.3, 96.9, 95.8, 97.2, 96.4, 95.9, 97.1, 96.6, 96.6, 97.8, 97.8, 98.8, 98.8, 100.5, 98.1, 100.5, 97.9, 101.0, 100.9, 100.1, 101.3, 101.0, 100.3, 99.7, 100.0, 79.4, 80.1, 78.8, 78.9, 81.2, 81.0, 79.9, 79.9, 81.1, 81.0, 80.9, 81.1, 80.3, 81.6, 100.7, 102.4, 102.3, 102.7, 101.5, 100.8, 102.0, 103.9, 103.4, 103.0, 102.4, 103.6, 103.9, 104.0, 102.3, 103.9, 83.6, 83.7, 83.7, 86.7, 86.0, 85.8, 86.9, 86.2, 86.5, 86.3, 86.4, 83.9, 86.5, 86.2, 84.8, 86.8] . -Now all of the laptimes fro the 2017 Formula 1 season have been converted into laptimes that appear purely in seconds. . result_status_final[&#39;FastestLapTime_Seconds&#39;] =data_seconds . result_status_final . Unnamed: 0 Unnamed: 0.1 Unnamed: 0.1.1 resultId raceId driverId constructorId number grid position ... rank fastestLapTime fastestLapSpeed statusId Driver Name status year round name FastestLapTime_Seconds . 0 0 | 0 | 0 | 23488 | 974 | 825 | 210 | 20 | 11 | 10.0 | ... | 7 | 01:16.3 | 157.420 | 1 | Magnussen | Finished | 2017 | 6 | Monaco Grand Prix | 76.3 | . 1 1 | 1 | 1 | 23482 | 974 | 822 | 131 | 77 | 3 | 4.0 | ... | 9 | 01:16.4 | 157.160 | 1 | Bottas | Finished | 2017 | 6 | Monaco Grand Prix | 76.4 | . 2 2 | 2 | 2 | 23480 | 974 | 8 | 6 | 7 | 1 | 2.0 | ... | 3 | 01:15.5 | 159.058 | 1 | Raikkonen | Finished | 2017 | 6 | Monaco Grand Prix | 75.5 | . 3 3 | 3 | 3 | 23491 | 974 | 815 | 10 | 11 | 7 | 13.0 | ... | 1 | 01:14.8 | 160.561 | 1 | Perez | Finished | 2017 | 6 | Monaco Grand Prix | 74.8 | . 4 4 | 4 | 4 | 23485 | 974 | 1 | 131 | 44 | 13 | 7.0 | ... | 5 | 01:15.8 | 158.433 | 1 | Hamilton | Finished | 2017 | 6 | Monaco Grand Prix | 75.8 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 303 303 | 304 | 304 | 23470 | 973 | 4 | 1 | 14 | 7 | 12.0 | ... | 4 | 01:23.9 | 199.752 | 12 | Alonso | +2 Laps | 2017 | 5 | Spanish Grand Prix | 83.9 | . 304 304 | 305 | 305 | 23471 | 973 | 13 | 3 | 19 | 9 | 13.0 | ... | 13 | 01:26.5 | 193.796 | 12 | Massa | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.5 | . 305 305 | 306 | 306 | 23469 | 973 | 828 | 15 | 9 | 16 | 11.0 | ... | 10 | 01:26.2 | 194.379 | 12 | Ericsson | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.2 | . 306 306 | 307 | 307 | 23473 | 973 | 835 | 4 | 30 | 17 | 15.0 | ... | 6 | 01:24.8 | 197.517 | 12 | Palmer | +2 Laps | 2017 | 5 | Spanish Grand Prix | 84.8 | . 307 307 | 308 | 308 | 23474 | 973 | 840 | 3 | 18 | 18 | 16.0 | ... | 16 | 01:26.8 | 192.980 | 12 | Stroll | +2 Laps | 2017 | 5 | Spanish Grand Prix | 86.8 | . 308 rows × 25 columns . -I have now added the fastest lap time in seconds to the matrix above. . -For exmaple the first row shoes a fastest lap time of 1:16.3 which translates to fastest lap time in seconds as 76.3 . Visuals begin . sns.barplot(x=&#39;Driver Name&#39;,y=&#39;rank&#39;,data=result_status_final) plt.xticks(rotation=80) plt.title(&#39;The rank of drivers in 2017&#39;) . Text(0.5, 1.0, &#39;The rank of drivers in 2017&#39;) . The rank of drivers in 2017 analysis . -NOTE. The lower the ranking number is for a driver means that they performed better than a higher ranking driver. . -By analyzing the above plot, we can observe that Formula 1 driver, Wehrlein has the highest rank among all of the drivers in the 2017 Formula 1 season. . -Just behind Wehrlein is Ericsson and this makes sense in comparison to all of the other drivers because based on the 2017 season both Wehrlein and Ericsson attempted the most GPs and had the worst results out of their competitors, cumulatively. Therefore this demonstrates the correlation of a higher rank being tied to the lowest position in the Formula 1 Championship. . -On the other hand we can observe how Hamilton and Vettel have the lowest rank in the plot. This further demonstrates acccurately the final championship standings of the Formula 1 season since took home the championship, Vettel was vice-champion, and Bottas rounded out the poidum position in 3rd for the championship. . Drivers and their fastest lap speed F1 2017 analysis . sns.barplot(x=&#39;Driver Name&#39;,y=&#39;fastestLapSpeed&#39;,data=result_status_final) plt.xticks(rotation=80) plt.title(&#39;Drivers and their fastest lap speed F1 2017&#39;) . Text(0.5, 1.0, &#39;Drivers and their fastest lap speed F1 2017&#39;) . -The plot above demonstrates the each drivers fastest lap speed visually. . -Hartley had one the worst fastest lap speed. This is a combination of car and circuit. . -The next plot will demonstrate what I am alluding to here. Hartley wasn’t a part of the Italian Grand prix which is known for its speed. . -Hartley’s performance is not purely a result of being in a slow car it is also a result of being absent at one of the fastest Grand prix in the Formula 1 calendar. . -Furthermore, Giovinazzi was also a drivers performance that needs some explanation. He replaced Wehrlein in the 2017 season at the Australian Gp and at the Chinese Gp. He might&#39;ve got lucky with a monster lap at the Australian Gp receiving a tow from his competitors. . -Notes: The Australian Gp is one of the faster tracks on the calendar and a tow is when a car breaks the slip stream in front of you. This causes you to draft behind them and gain an advantage in speed. . Fastest lap speed at each Grand prix of the Formula 1, 2017 season analysis . sns.barplot(x=&#39;name&#39;,y=&#39;fastestLapSpeed&#39;,data=result_status_final) plt.xticks(rotation=80) plt.title(&#39;The variation of lap speed per Grand prix, F1 2017&#39;) . Text(0.5, 1.0, &#39;The variation of lap speed per Grand prix, F1 2017&#39;) . -Plot above demonstrates the lap speed variation of each Grand prix that took place in the 2017 Formula 1 season . -The above analysis describes the Grand prix that has the highest and lowest lap speed. . -The Italian Gp was the fastest speed while Singapore occupied last place in the lap speed. . -Deeper analysis for Singapore having such a drastic drop in speed found that Singapore Gp a race that began under wet conditions. This significantly reduces the speed of the vehicles. As a result of the treacherous conditions the race was cut short, drivers did not complete the scheduled race distance of 61 laps due to the 2-hour time limit being reached, so the chequered flag was shown on lap 58. . -Interesting feature to compare is the lap speed between the Singapore Gp and the Monaco Gp, it just goes to show how ridiculous Formula 1 cars can be. In dry conditions around the Monaco Gp the fastest lap was a little over 150mph. At the Singapore Gp where it was a rain race from the get-go they exceed speed of that dry conditions in Monaco. It was also a crash fest so a lot of the fast cars didn’t register a fast lap. . Link with highlight of the Singapore Gp here: https://www.youtube.com/watch?v=wAOMOmsqpUY . Variation of Laptime with change in Lap speed F1 2017 analysis . sns.lineplot(x=&#39;fastestLapSpeed&#39;,y=&#39;FastestLapTime_Seconds&#39;,data=result_status_final[0:20]) plt.xticks(rotation=80) plt.title(&#39;Variation of Laptime with change in Lap speed&#39;) . Text(0.5, 1.0, &#39;Variation of Laptime with change in Lap speed&#39;) . -This analysis was extremely interesting because of the way the values are plotted; there is a dip at the beginning and end . -The plot demonstrates that there is a dip in speed when the lap times are longer than 105 seconds. This could be due to the fact that race organizer need to have a track layout in mind that will accommodate for high speeds therefore the track distance becomes longer. Longer straights = longer time vehicle is in a straight line optimal to reach top speeds. . -The higher the speeds you’ll need more track area to decelerate or account for run off area in case of emergency (brake failure) . Fastsest Lap time per Grand Prix F1, 2017 analysis . sns.barplot(x=&#39;name&#39;,y=&#39;FastestLapTime_Seconds&#39;,data=result_status_final) plt.xticks(rotation=80) plt.title(&#39;Fastsest Lap time per Grand Prix 2017&#39;) . Text(0.5, 1.0, &#39;Fastsest Lap time per Grand Prix 2017&#39;) . -The plot indicates the fastest time lap taken by each Grand prix in the 2017, F1 season. . -The results are really cool to analyze here because we can see the Belgian Grand prix takes place at Spa leng of 4.2 miles long . -Australian Gp has a legth of 3.2 miles . -Austrian GP is 2.6 miles long and unlike Monaco which is also a short cirucit, the Austrian Gp is much more of a race track that allows drivers to maintain a hgher lap speed unlike the Monaco Gp . Pit Stop Data Analysis begins . dataset_pitstop=pd.read_csv(&#39;14-17_Pitstops.csv&#39;) . dataset_pitstop . raceId driverId stop lap time duration milliseconds . 0 900 | 154 | 1 | 1 | 17:09:56 | 17.255 | 17255 | . 1 900 | 821 | 1 | 1 | 17:10:12 | 32.657 | 32657 | . 2 900 | 815 | 1 | 1 | 17:10:14 | 25.541 | 25541 | . 3 900 | 18 | 1 | 11 | 17:26:02 | 22.411 | 22411 | . 4 900 | 815 | 2 | 11 | 17:27:03 | 22.497 | 22497 | . ... ... | ... | ... | ... | ... | ... | ... | . 3235 988 | 828 | 1 | 30 | 17:56:57 | 22.176 | 22176 | . 3236 988 | 839 | 1 | 31 | 17:57:47 | 21.865 | 21865 | . 3237 988 | 832 | 1 | 31 | 17:57:49 | 21.956 | 21956 | . 3238 988 | 154 | 1 | 32 | 17:59:52 | 21.850 | 21850 | . 3239 988 | 840 | 3 | 35 | 18:06:11 | 21.908 | 21908 | . 3240 rows × 7 columns . result_status=dataset_pitstop.merge(data_driver,on=[&#39;driverId&#39;]) . . result_status . raceId driverId stop lap time duration milliseconds Driver Name . 0 900 | 154 | 1 | 1 | 17:09:56 | 17.255 | 17255 | Grosjean | . 1 900 | 154 | 2 | 28 | 17:56:08 | 22.264 | 22264 | Grosjean | . 2 901 | 154 | 1 | 12 | 16:26:14 | 25.046 | 25046 | Grosjean | . 3 901 | 154 | 2 | 25 | 16:50:09 | 25.596 | 25596 | Grosjean | . 4 901 | 154 | 3 | 40 | 17:17:34 | 25.735 | 25735 | Grosjean | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 3225 987 | 843 | 1 | 1 | 14:04:59 | 19.936 | 19936 | Hartley | . 3226 987 | 843 | 2 | 2 | 14:07:17 | 19.439 | 19439 | Hartley | . 3227 987 | 843 | 3 | 3 | 14:09:29 | 17.738 | 17738 | Hartley | . 3228 987 | 843 | 4 | 27 | 14:41:13 | 23.830 | 23830 | Hartley | . 3229 988 | 843 | 1 | 26 | 17:49:52 | 21.598 | 21598 | Hartley | . 3230 rows × 8 columns . -Now I have race results with pitstop information in the same matrix. . len(result_status[&#39;duration&#39;][6]) . 6 . . result_status.shape[0] . 3230 . result_status=result_status[[&#39;duration&#39;,&#39;Driver Name&#39;]] . -This wil allow to me create a matrix that has both a drivers name and the duration of their pit stop . X=result_status[&#39;duration&#39;].values Y=result_status[&#39;Driver Name&#39;].values . X . array([&#39;17.255&#39;, &#39;22.264&#39;, &#39;25.046&#39;, ..., &#39;17.738&#39;, &#39;23.830&#39;, &#39;21.598&#39;], dtype=object) . Y . array([&#39;Grosjean&#39;, &#39;Grosjean&#39;, &#39;Grosjean&#39;, ..., &#39;Hartley&#39;, &#39;Hartley&#39;, &#39;Hartley&#39;], dtype=object) . . result_status_duration=[] result_status_driver_name=[] for i in range(result_status.shape[0]): if len(X[i])==6: result_status_duration.append(float(X[i])) result_status_driver_name.append(Y[i]) . dataf_pitstop_14_17=pd.DataFrame(columns=[&#39;Duration&#39;,&#39;Driver Name&#39;]) . dataf_pitstop_14_17[&#39;Duration&#39;]=result_status_duration dataf_pitstop_14_17[&#39;Driver Name&#39;]=result_status_driver_name . . dataf_pitstop_14_17 . Duration Driver Name . 0 17.255 | Grosjean | . 1 22.264 | Grosjean | . 2 25.046 | Grosjean | . 3 25.596 | Grosjean | . 4 25.735 | Grosjean | . ... ... | ... | . 3101 19.936 | Hartley | . 3102 19.439 | Hartley | . 3103 17.738 | Hartley | . 3104 23.830 | Hartley | . 3105 21.598 | Hartley | . 3106 rows × 2 columns . -The above data frame now accounts for all of pitstops performed in Formula 1 during the 2014-2017 seasons . Pit stop Data plot . sns.barplot(x=&#39;Driver Name&#39;,y=&#39;Duration&#39;,data=dataf_pitstop_14_17) plt.xticks(rotation=80) plt.title(&#39;Drivers Average Pitstop Duration between 2014 to 2017&#39;) . Text(0.5, 1.0, &#39;Drivers Average Pitstop Duration between 2014 to 2017&#39;) . -It&#39;s difficult to take gather information from this but I was able to deduce information from it. . -The first thing I was able to infer from the plot was Mercedes Consistency with pitstops. Looking at Hamilton bar, his seems to have the shortest duration in pitstops from 2014-2017. This has to be a significant factor in obtaining the championship for those seasons. . -Bottas was interesting because from 2014-2016 he raced under Williams, they were known for their quick pitstops. During his time at Williams his team mate was Felipe Massa, his bar also demonstrates quick pitstops. . -Harleys pitstop bar demonstrates that it was low in time duration however this is a result of his lack of participation in formula 1. Since the data frame holds all of the pitstops from 2014-2017, cumulatively this increases the average pit stop duration because some track have a longer pitstop, meaning the pitstop is linger in duration. . Disucssion . What my analysis shows: . -A variety of information in regards to Formula 1 lap speed and lap times during the 2017 season. I also analyze the pit stop duration for all drivers that competed in Formula 1 during the 2014-2017 race seasons. . -Personally one of the analysis that I enjoyed the most was the variation of lap time with change in lap speed. I thought this was an interesting plot and i think most people would be surprised to know that lap speed above 200mph will make your lap faster anything less will mean that the lap time will increase the duration of the lap time. Essentially there waw. so anything less than 160 mph and anything over 205mph will a faster lap time comparatively speaking in comparison to tracks that are stuck in between those ranges in speed. . What is the big picture: . -I am eager to explore motorsports data in the future. I wanted to focus first on F1 because I thought i would be able to find interesting data. It had it&#39;s pros and cons. The big picture overall was to familiarize myself with the data that I was ablet to obtain and see what type of analysis I could create. I wanted this project to be the foundation of a YouTube channel I build in the future. One that is focused on motorsports, that gives a unique perspective on them by combining my python abilities to find data and my knowledge with race cars and racing. This will allow me to explore different topics than other Motorsport content creators on YouTube. . How are these findings useful . -These findings can be useful in a number of ways. . -The findings in this project can be useful to create informational/educational content. For people that are wanting to find information in F1 from 2014-2017. I think this project will be helpful for other motorsport enthusiast since there aren&#39;t many Formula 1 analysis. . -This project will be useful for me as it will provide a foundation of what type of data i should look for and how to approach another research topic in the future. .",
            "url": "https://alejofernandez126.github.io/FastaiBlog/2022/03/18/final-F1-Project.html",
            "relUrl": "/2022/03/18/final-F1-Project.html",
            "date": " • Mar 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alejofernandez126.github.io/FastaiBlog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alejofernandez126.github.io/FastaiBlog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alejofernandez126.github.io/FastaiBlog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alejofernandez126.github.io/FastaiBlog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}